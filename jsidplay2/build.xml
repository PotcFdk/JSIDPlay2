<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     12.07.2009 17:47:41                                                        

     JSIDPlay2    
     Create deployable JARS from the sources
                   
     Ken HÃ¤ndel
     ====================================================================== -->
<project name="JSIDPlay2" default="deployOnlineContent" xmlns:cl="antlib:net.jtools.classloadertask">
	<description>
		Create deployable JARS from scratch, sign and upload to the Web hoster
    </description>

	<!-- Additional tasks classloader definition -->
	<typedef uri="antlib:net.jtools.classloadertask" resource="net/jtools/classloadertask/antlib.xml">
		<classpath>
			<fileset dir="${basedir}/antlib" includes="ant-classloadertask.jar" />
		</classpath>
	</typedef>
	<cl:classloader loader="project">
		<classpath>
			<fileset dir="${basedir}/antlib" includes="jsch-0.1.45.jar" />
			<fileset dir="${basedir}/antlib" includes="proguard.jar" />
			<fileset dir="${basedir}/antlib" includes="commons-net-3.1.jar" />
			<fileset dir="${launch4j.bindir}" includes="launch4j.jar" />
			<fileset dir="${launch4j.bindir}/lib" includes="xstream.jar" />
		</classpath>
	</cl:classloader>

	<!-- ProGuard task definition -->
	<taskdef resource="proguard/ant/task.properties" loaderref="project" />

	<!-- Applet infos -->
	<property name="name" value="Java SIDPlay2 - Music Player &amp; C64 SID Chip Emulator" />
	<property name="width" value="1024" />
	<property name="height" value="768" />
	<!-- JNLP main class -->
	<property name="jnlp_main_class" value="applet.JSIDPlay2Main" />
	<!-- Main class of manifest files -->
	<property name="mf_main_class" value="applet.JSIDPlay2Main" />
	<property name="mf_main_class_console" value="sidplay.ConsolePlayer" />
	<!-- main jar name of the player -->
	<property name="mainJar" value="jsidplay2.jar" />
	<property name="mainJarConsole" value="jsidplay2_console.jar" />
	<!-- Applet Browser Icon -->
	<property name="icon">jsidplay2.png</property>
	<!-- Name of the archive containing the release of JSIDPlay2 -->
	<property name="releaseName" value="jsidplay2-2.5" />
	<!-- alias name of the key in the keystore to sign the JARs -->
	<property name="sign_key_alias" value="jsidplay2" />

	<!-- source folder to compile -->
	<property name="src" location="${basedir}/src" />
	<!-- encoding of java source files -->
	<property name="src_encoding" value="ISO-8859-1" />
	<!-- resources folder -->
	<property name="res" location="${basedir}/res" />
	<!-- binary folder of class files and resources -->
	<property name="bin" location="${basedir}/bin" />
	<!-- test source folder to compile -->
	<property name="test_src" location="${basedir}/test" />
	<!-- binary test folder of class files and resources -->
	<property name="test_bin" location="${basedir}/test_bin" />
	<!-- build result directory with deployable form of JSIDPlay2 -->
	<property name="result_dir" location="${basedir}/result" />
	<!-- test results directory -->
	<property name="target.junit.results.dir" location="${basedir}/test_results" />
	<!-- test report directory -->
	<property name="target.junit.report.dir" location="${target.junit.results.dir}/test_report" />
	<!-- result directory of C64Jukebox applet version -->
	<property name="c64jukebox_dir" location="${result_dir}/C64Jukebox" />
	<!-- name of the C64 jukebox JAR -->
	<property name="c64jukebox_jar" value="c64jukebox.jar" />

	<!-- jsiddevice -->
	<property name="jsiddevice_jar" value="jsiddevice.jar" />
	<property name="jsiddevice_exe" value="jsiddevice.exe" />
	<property name="jsiddevice_zip" value="jsiddevice.zip" />
	<property name="jsiddevice_main_class" value="netsiddev.NetworkSIDDevice" />
	<!-- HVSC -->
	<property name="hvsc_dir" location="${result_dir}/online/hvsc" />
	<property name="hvsc_zip" value="C64Music.zip" />
	<property name="hvsc_crc" value="C64Music.crc" />
	<property name="hvsc_subfolder" value="C64Music" />
	<property name="hvsc_max_size" value="37748736" />
	<!-- CGSC -->
	<property name="cgsc_dir" location="${result_dir}/online/cgsc" />
	<property name="cgsc_zip" value="CGSC.zip" />
	<property name="cgsc_crc" value="CGSC.crc" />
	<property name="cgsc_subfolder" value="CGSC" />
	<!-- HVMEC -->
	<property name="hvmec_dir" location="${result_dir}/online/hvmec" />
	<property name="hvmec_zip" value="HVMEC.zip" />
	<property name="hvmec_crc" value="HVMEC.crc" />
	<!-- Demos -->
	<property name="demos_dir" location="${result_dir}/online/demos" />
	<property name="demos_zip" value="Demos.zip" />
	<property name="demos_crc" value="Demos.crc" />
	<!-- Gamebase64 -->
	<property name="gamebase_dir" location="${result_dir}/online/gamebase" />
	<property name="gamebase_jar" value="gb64.jar" />
	<property name="gamebase_crc" value="gb64.crc" />
	<property name="gamebase_name" value="GB64" />

	<!-- Read all properties to build and deploy -->
	<property file="build.properties" />

	<!-- Class path of JSIDPlay2 -->
	<fileset id="jars" dir="${basedir}">
		<include name="lib/*.jar" />
	</fileset>
	<path id="class.path">
		<fileset refid="jars" />
	</path>
	<!-- Test Class path of JSIDPlay2 -->
	<fileset id="testjars" dir="${basedir}">
		<include name="test/lib/*.jar" />
	</fileset>
	<path id="test.class.path">
		<fileset refid="testjars" />
	</path>
	<!-- FEST task definition -->
	<taskdef resource="festjunittasks" classpathref="test.class.path" />

	<!-- Class path to be included in the manifest file -->
	<pathconvert property="mf_class_path" pathsep=" " dirsep="">
		<path refid="class.path" />
		<map from="${basedir}/lib" to="" />
	</pathconvert>
	<!-- Get list of sizes of all files (used to determine jar sizes within jnlp) -->
	<scriptdef name="getLength" language="javascript">
		<attribute name="files" />
		<attribute name="path" />
		<attribute name="property" />
		<![CDATA[
	            fileNames = attributes.get("files");
				path = attributes.get("path");
	            propName = attributes.get("property");
				buf = new java.lang.StringBuffer();
				tok = new java.util.StringTokenizer(fileNames, " ");
				while (tok.hasMoreTokens()) {
					fileName = tok.nextToken();
        			file = new java.io.File(new java.io.File(path), fileName);
					buf.append(new java.lang.Integer(file.length()));
					if (tok.hasMoreTokens()) {
						buf.append(" ");
					}
				}
		        project.setNewProperty(propName, buf.toString());
	        ]]>
	</scriptdef>

	<!-- ================================= 
          target: deployOnlineContent
          Description:
          Create extra online content of JSIDPlay2, that is Gamebase64 and HVSC for example.
          Everything is deployed to the web hoster.
         ================================= -->
	<target name="deployOnlineContent" depends="init,gb64_import,hvsc_import,cgsc_import,hvmec_import,upload" description="Deploy extra online content to the Web Hoster" />

	<!-- ================================= 
          target: init
          Description:
          Clean up old binaries and build results and
          re-create the directories.
         ================================= -->
	<target name="init">
		<echo>Please, make sure java.home points to a JDK (java.home=${java.home})</echo>
		<delete dir="${result_dir}" />
		<mkdir dir="${result_dir}" />
	</target>

	<!-- ================================= 
          target: compile
          Description:
          The time stamp in the main class is updated first,
          then all classes of the source directory are
          compiled into the target directory.
          All resources are copied into the target directory,
          as eclipse does it accordingly.
         ================================= -->
	<target name="compile">
		<delete dir="${bin}" />
		<mkdir dir="${bin}" />
		<replace token="http://kenchis.t15.org/jsidplay2/" value="${server_url}">
			<fileset dir="${src}" includes="**/*.xml" />
		</replace>
		<javac includeantruntime="false" debug="true" debuglevel="lines,vars,source" srcdir="${src}" destdir="${bin}" encoding="${src_encoding}">
			<classpath refid="class.path" />

		</javac>
		<copy todir="${bin}">
			<fileset dir="${src}">
				<include name="**/*" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<!-- ================================= 
          target: c64jukebox
          Description:
          Create a deployable form of C64Jukebox,
          that is a lightweight applet version
          (http://c64jukebox.hardsid.com).
         ================================= -->
	<target name="c64jukebox" depends="c64jukebox_init,c64jukebox_jar,c64jukebox_resources" />

	<!-- ================================= 
          target: c64jukebox_init
          Description:
          Create C64Jukebox directory.
         ================================= -->
	<target name="c64jukebox_init">
		<mkdir dir="${c64jukebox_dir}" />
	</target>

	<!-- ================================= 
          target: c64jukebox_jar
          Description:
          Create the main jar of C64Jukebox.
          all binaries and all sources are included.
          Excluded is all GUI staff and functionality
          which is not needed here.
         ================================= -->
	<target name="c64jukebox_jar" depends="compile">
		<delete file="${c64jukebox_dir}/${c64jukebox_jar}" />
		<jar destfile="${c64jukebox_dir}/${c64jukebox_jar}">
			<fileset dir="${src}">
				<exclude name="applet/**" />
				<exclude name="hardsid/**" />
				<exclude name="hardsid_builder/driver/**" />
				<exclude name="hardsid_builder/lib/**" />
				<exclude name="libpsid64/**" />
			</fileset>
			<fileset dir="${bin}">
				<include name="**/*.class" />
				<exclude name="applet/**" />
				<exclude name="hardsid/**" />
				<exclude name="hardsid_builder/driver/**" />
				<exclude name="hardsid_builder/lib/**" />
				<exclude name="libpsid64/**" />
			</fileset>
		</jar>
	</target>

	<!-- ================================= 
          target: c64jukebox_resources
          Description:
          Add all additional resources.
          That is a start page of the web-site
          and some example SID files.
         ================================= -->
	<target name="c64jukebox_resources">
		<filter token="server_url" value="${server_url}" />
		<copy todir="${c64jukebox_dir}" filtering="true">
			<fileset dir="${res}">
				<include name="SIDPlay.html" />
			</fileset>
		</copy>
		<copy todir="${c64jukebox_dir}">
			<fileset dir="${res}">
				<include name="files/**/*" />
			</fileset>
		</copy>
	</target>

	<!-- ================================= 
          target: compress_exe
          Description:
          Shrink JSIDDevice, but
          only if property upx.bindir is set and pointing to a valid
          UPX (upx.sourceforge.net) installation.
         ================================= -->
	<target name="compress_exe" if="upx.bindir">
		<exec executable="${upx.bindir}/upx">
			<arg value="--lzma" />
			<arg value="--best" />
			<arg value="--ultra-brute" />
			<arg file="${result_dir}/${jsiddevice_exe}" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!-- Set property ssh, if ssh is configured -->
	<target name="setup_upload">
		<available file="${basedir}/build.properties" property="build.configured" />
		<fail unless="build.configured" message="Please copy sample_build.properties to build.properties and configure settings." />
		<condition property="ssh">
			<equals arg1="${access_type}" arg2="ssh" trim="true" />
		</condition>
	</target>

	<!-- ================================= 
          target: upload
          Description:
          Upload JSIDPlay2 deployment results to the Web Hoster using SSH.
         ================================= -->
	<target name="upload" depends="setup_upload,upload_ftp" if="ssh">
		<input message="SSH keyfile?" addproperty="keyfile" />
		<input message="SSH passphrase?" addproperty="passphrase" />
		<input message="SSH remote server?" addproperty="remote_srv" />
		<input message="SSH remote directory?" addproperty="remote_dir" />
		<scp verbose="true" keyfile="${keyfile}" passphrase="${passphrase}" todir="${remote_srv}:${remote_dir}" trust="true">
			<fileset dir="${result_dir}">
				<include name="**/*" />
			</fileset>
		</scp>
	</target>

	<!-- ================================= 
          target: upload
          Description:
          Upload JSIDPlay2 deployment results to the Web Hoster using FTP.
         ================================= -->
	<target name="upload_ftp" depends="setup_upload" unless="ssh">
		<input message="FTP username?" addproperty="username" />
		<input message="FTP password?" addproperty="passphrase" />
		<input message="FTP server?" addproperty="remote_srv" />
		<input message="FTP remote directory?" addproperty="remote_dir" />
		<ftp passive="true" binary="true" action="put" verbose="true" userid="${username}" password="${passphrase}" server="${remote_srv}" remotedir="${remote_dir}">
			<fileset dir="${result_dir}">
				<include name="**/*" />
			</fileset>
		</ftp>
	</target>

	<!-- ================================= 
          target: gb64_import
          Description:
          Import GameBase 64 database file (.mdb) via ODBC-JDBC bridge
          into a java-based HSQLDB database as a JAR.
         ================================= -->
	<target name="gb64_import" depends="compile" if="gb64.mdbfile">
		<available file="${basedir}/build.properties" property="build.configured" />
		<fail unless="build.configured" message="Please copy sample_build.properties to build.properties and configure settings." />
		<input message="sourceDriver?" addproperty="sourceDriver" />
		<input message="sourceURL?" addproperty="sourceURL" />
		<input message="targetDriver?" addproperty="targetDriver" />
		<input message="targetURL?" addproperty="targetURL" />

		<mkdir dir="${gamebase_dir}" />
		<java fork="true" classname="applet.gamebase.createdb.GameBaseUtility">
			<classpath refid="class.path" />
			<classpath location="${bin}" />
			<arg value="sourceDriver=${sourceDriver}" />
			<arg value="sourceURL=${sourceURL}" />
			<arg value="targetDriver=${targetDriver}" />
			<arg value="targetURL=${targetURL}" />
		</java>
		<delete file="${gamebase_dir}/${gamebase_jar}" />
		<jar destfile="${gamebase_dir}/${gamebase_jar}" compress="true">
			<fileset dir="${gamebase_dir}">
				<include name="${gamebase_name}.*" />
			</fileset>
		</jar>
		<delete includeemptydirs="true">
			<fileset dir="${gamebase_dir}">
				<include name="${gamebase_name}.*" />
				<exclude name="${gamebase_name}.jar" />
			</fileset>
		</delete>

		<!-- create a CRC file -->
		<java fork="true" classname="applet.download.DownloadThread" outputproperty="checksum_gb64">
			<classpath refid="class.path" />
			<classpath location="${bin}" />
			<arg path="${gamebase_dir}/${gamebase_jar}" />
		</java>
		<length property="filesize_gb64" file="${gamebase_dir}/${gamebase_jar}" />
		<propertyfile file="${gamebase_dir}/${gamebase_crc}">
			<entry operation="=" type="string" key="filename" value="${gamebase_jar}" />
			<entry operation="=" type="string" key="size" value="${filesize_gb64}" />
			<entry operation="=" type="string" key="crc32" value="${checksum_gb64}" />
		</propertyfile>
	</target>

	<!-- ================================= 
          target: hvsc_import
          Description:
          Import HVSC ZIP file (.zip) containing another ZIP file
          into a single high compressed ZIP file.
         ================================= -->
	<target name="hvsc_import" if="hvsc.zip">
		<delete dir="${hvsc_dir}" />
		<mkdir dir="${hvsc_dir}" />
		<!-- Uncompress HVSC completely -->
		<unzip dest="${hvsc_dir}" src="${hvsc.zip}" />
		<unzip dest="${hvsc_dir}" src="${hvsc_dir}/${hvsc_zip}" />
		<delete>
			<fileset dir="${hvsc_dir}">
				<include name="*.zip" />
			</fileset>
		</delete>
		<!-- Compress HVSC -->
		<zip level="9" destfile="${hvsc_dir}/${hvsc_zip}" compress="true" update="false">
			<fileset dir="${hvsc_dir}">
				<include name="**/*.sid" />
				<include name="**/*.txt" />
			</fileset>
		</zip>
		<delete dir="${hvsc_dir}/${hvsc_subfolder}" />

		<!-- create a CRC file -->
		<java fork="true" classname="applet.download.DownloadThread" outputproperty="checksum_hvsc">
			<classpath refid="class.path" />
			<classpath location="${bin}" />
			<arg path="${hvsc_dir}/${hvsc_zip}" />
		</java>
		<length property="filesize_hvsc" file="${hvsc_dir}/${hvsc_zip}" />
		<propertyfile file="${hvsc_dir}/${hvsc_crc}">
			<entry operation="=" type="string" key="filename" value="${hvsc_zip}" />
			<entry operation="=" type="string" key="size" value="${filesize_hvsc}" />
			<entry operation="=" type="string" key="crc32" value="${checksum_hvsc}" />
		</propertyfile>

		<!-- Split ZIP file (sourceforge has a maximum file size limit) -->
		<java fork="true" classname="applet.collection.createhvsc.Split">
			<classpath refid="class.path" />
			<classpath location="${bin}" />
			<arg value="bytes=${hvsc_max_size}" />
			<arg value="file=${hvsc_dir}/${hvsc_zip}" />
		</java>
		<delete file="${hvsc_dir}/${hvsc_zip}" />
	</target>

	<!-- ================================= 
          target: cgsc_import
          Description:
          Import CGSC ZIP file (.7z)
          into a ZIP file.
         ================================= -->
	<target name="cgsc_import" if="7zip.home">
		<delete dir="${cgsc_dir}" />
		<mkdir dir="${cgsc_dir}" />
		<!-- Uncompress CGSC -->
		<exec executable="${7zip.home}/7z" failonerror="true">
			<arg value="x" />
			<arg value="-o${cgsc_dir}" />
			<arg value="${cgsc.7z}" />
		</exec>
		<!-- Compress CGSC -->
		<zip level="9" destfile="${cgsc_dir}/${cgsc_zip}" compress="true" update="false">
			<fileset dir="${cgsc_dir}">
				<include name="**/*.mus" />
				<include name="**/*.str" />
			</fileset>
		</zip>
		<delete dir="${cgsc_dir}/${cgsc_subfolder}" />

		<!-- create a CRC file -->
		<java fork="true" classname="applet.download.DownloadThread" outputproperty="checksum_cgsc">
			<classpath refid="class.path" />
			<classpath location="${bin}" />
			<arg path="${cgsc_dir}/${cgsc_zip}" />
		</java>
		<length property="filesize_cgsc" file="${cgsc_dir}/${cgsc_zip}" />
		<propertyfile file="${cgsc_dir}/${cgsc_crc}">
			<entry operation="=" type="string" key="filename" value="${cgsc_zip}" />
			<entry operation="=" type="string" key="size" value="${filesize_cgsc}" />
			<entry operation="=" type="string" key="crc32" value="${checksum_cgsc}" />
		</propertyfile>
	</target>

	<!-- ================================= 
          target: hvmec
          Description:
          Import HVMEC BZ2 file (.bz2)
          into a ZIP file.
         ================================= -->
	<target name="hvmec_import" if="hvmec.bz2">
		<delete dir="${hvmec_dir}" />
		<mkdir dir="${hvmec_dir}" />
		<untar src="${hvmec.bz2}" compression="gzip" dest="${hvmec_dir}" />
		<delete>
			<fileset dir="${hvmec_dir}">
				<include name="*.tar" />
			</fileset>
		</delete>
		<zip level="9" destfile="${hvmec_dir}/${hvmec_zip}" compress="true" update="false">
			<fileset dir="${hvmec_dir}">
				<include name="**/*" />
			</fileset>
		</zip>
		<delete dir="${hvmec_dir}/HVMEC" />

		<!-- create a CRC file -->
		<java fork="true" classname="applet.download.DownloadThread" outputproperty="checksum_hvmec">
			<classpath refid="class.path" />
			<classpath location="${bin}" />
			<arg path="${hvmec_dir}/${hvmec_zip}" />
		</java>
		<length property="filesize_hvmec" file="${hvmec_dir}/${hvmec_zip}" />
		<propertyfile file="${hvmec_dir}/${hvmec_crc}">
			<entry operation="=" type="string" key="filename" value="${hvmec_zip}" />
			<entry operation="=" type="string" key="size" value="${filesize_hvmec}" />
			<entry operation="=" type="string" key="crc32" value="${checksum_hvmec}" />
		</propertyfile>
	</target>

</project>
