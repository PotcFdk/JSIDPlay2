Build JSIDPlay2
===============
"mvn clean install"
-> target/standalone	-	local PC version
-> target/deploy		-	website version

Deploy JSIDPlay2
================
"mvn clean deploy"
does mvn clean install
and uploads target/deploy to web-server

Build JSIDPlay2 and runs UI-tests
=================================
mvn clean install -P release			"You should disable screensaver to not interfere with the tests"

Set the following optional properties in Eclipse to deploy additional online features:
Open Preferences/Run/Debug/StringSubstitution or at command line: using -D

-Dgb64.mdbfile=<pathToGameBase64.mdb>
-Dhvsc.7z=<pathToHVSC.7z>
-Dcgsc.7z=<pathToCGSZ.7z>
-Dhvmec.zip=<pathToHVMEC.zip>
-Dupx.exe=<pathToUPX>

Use Oracle Java8
================
This is my recommendation, because JavaFX is already included!

OpenJDK
=======
If you prefer more recent versions get your installer here: https://adoptopenjdk.net

Java 9,10,11 in Eclipse:
========================
Since Java11 - JavaFX is no longer bundled with Java!
We will have to use a separate POM for JSIDPlay2 to include JavaFX. Thanks to Oracle :-(

Therefore, use the following build command:
mvn -Djavafx.platform=linux -f pom-java11.xml clean install		"(Specify platform: [win|linux|mac])"
instead of:
mvn clean install

Java9 and successor versions require additional launch parameters.
The configured required modules and the module path to JavaFX at startup of JSIDPlay2.
I have added an additional launch in Eclipse: "Sidplay2Frame (Since Java9)".
However to use this new launch in Eclipse you must
1st: Add Java11 to Eclipse for the project build and set as default: Window/Preferences, Java/Installed JREs
2nd: Copy the contents of pom-java11.xml to pom.xml (Eclipse will always use pom.xml) and
3rd: Launch "mvn clean install (Java11)".
Then, you can start JSIDPlay2 using launch "Sidplay2Frame (Since Java9)".

Eclipse JavaFX support:
=======================
1. Install e(fx)clipse
2. To get a content assistant on javafx css files:
Right click on your project -> properties -> Java build path -> libraries -> add library -> javaFX SDK
3. To edit .fxml files with FXML Editor:
Right click on .fxml file: Open With -> Other... -> FXML Editor (Check "Use it for all '*.fxml' files") -> OK
4. To use JavaFX Preview view in Eclipse, change root tag in fxml file (uncomment the commented out alternative version)
Eventually uncomment line in C64VBox.java (see TODO marker), still not sure, why some of the layouts need that.

HardSID4U:
==========
Alternative 1 (use unsigned drivers):
Install USB Driver (hardsidusb.*) from directory path	src/test/resources/hardsid
Now, reboot your computer into "disable driver signing" mode.
- Press F8 on every Windows boot
- Choose deactivate Driver signature checks and continue booting.

Alternative 2 (use signed drivers)
Open a new command prompt (important: use open as Administrator)
Extract signtools.zip from directory src/test/resources/hardsid containing important exe files.
Please type the following commands
makecert -$ individual -r -pe -ss "Self Signed Drivers" -n CN="Self Signed Drivers" selfsign.cer
certmgr /add selfsign.cer /s /r localMachine root
signtool sign /v /s "Self Signed Drivers" /n "Self Signed Drivers" hardsidusb_x64.sys
bcdedit -set TESTSIGNING ON
Now, reboot your computer into "disable driver signing" mode and load your shining new signed driver.
You only need to boot into this "disable driver signing" mode first time you
load the driver. It should work after that without any special tricks however testsigning needs to be enabled.

Use HardSID4U:
Connect HardSID4U device to your real computer.
Allow Windows to use USB hardware with Virtual box Toolbar icon in the bottom right side of the window.
Your user has to be a member of the group: vboxusers to let virtualbox access USB hardware.
Start JSIDPlay2 and switch from Emulation to HardSID4U.
Check console, that there are no error messages.

Hard-wire HardSID4U: connect mixed/out into the Microfone/in of your computer.
In Ubuntu Linux with Pulseaudio installed transport Microfone sound to speakers;
Open a terminal and type:
parec --latency-msec=1 | pacat --latency-msec=1
Lower your microphone volume level to prevent overdrive noise

as an alternative use:
pactl load-module module-loopback latency_msec=1
and disable with
pactl unload-module module-loopback

If volume control is not shown in Ubuntu, type:
"gsettings set com.canonical.indicator.sound visible true"
If microphone is greyed out, type:
"kmix"
and change "output device" to "Analog Stereo Duplex".

General tips:
=============

How to Create a HTTPS certificate and install easily for your Apache web-server:
https://certbot.eff.org/lets-encrypt/ubuntutrusty-apache

For support of double click on the JAR to start JSIDPlay2:
Right click on jsidplay-<version>.jar
Open with...
Choose a different one...
/home/ken/Downloads/jdk1.8.0_211/bin/java -jar
X Remember file type assignment

How to find out available JavaFX style classes of a node in the scene graph?
	private void dump(Node n, int depth) {
		for (int i = 0; i < depth; i++)
			System.out.print("  ");
		System.out.println(n);
		if (n instanceof Parent)
			for (Node c : ((Parent) n).getChildrenUnmodifiable())
				dump(c, depth + 1);
	}


Heap Memory Analyzer - To find memory leaks you can use:
jmap -dump:format=b,file=heap.bin <JavaProcessId>
Install Eclipse MAT (Heap Memory Analyzer) (https://www.eclipse.org/mat/)
Increase max memory, if required to load huge heap dumps in file MemoryAnalyzer.ini:
-Xmx=5g
In MAT - Load heap dump: File/Open heap.bin

TODO:
=====
- App: download sid register writes and siddump
- Playlists are wanted to be shared online
- the ability to have music playback occur alongside your SID dump feature. This would look a bit like a tracker,
  and would allow a listener to see the connections between register values and sounds.

Steps to create a release version:
==================================
Check release notes a last time
At 00:00 o' clock
Increase Version in pom.xml
Increase Version in pom-java11.xml
Increase Version in latest.properties
Run launch "Release JSIDPlay2"

Download latest versions ov HVSC, CGSC, HVMEC and GB64
Open Eclipse menu: Window/Preferences
Click Run/Dubug/String substitution
and update all file paths to the latest releases
Run launch "clean deploy (plus additional online content)"
Check in all local changes, please note: Update check will report a new release, immediately

Update JSIDPlay2 server with latest version:
Copy '/home/ken/workspace/jsidplay2/target/deploy/jsidplay2-4.5.zip' to
sftp://ken-whatssid/home/ken/Downloads
pkill -f server.restful.JSIDPlay2Server
cd Downloads/
rm -rf jsidplay2-4.4
unzip jsidplay2-4.4.zip
cd
./server.sh
less server.log

