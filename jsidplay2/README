mvn clean install
=================
target/libsidplay	-	library w/o dependencies
target/standalone	-	local PC version
target/deploy		-	website version

mvn clean deploy
=================
does mvn clean install
and uploads target/deploy to web-server

mvn clean deploy and run UI-tests
=================================
mvn clean install -P release

Set the following optional properties in Eclipse:
Open Preferences/Run/Debug/StringSubstitution or at command line: using -D

-Dgb64.mdbfile=<pathToGameBase64.mdb>
-Dhvsc.7z=<pathToHVSC.7z>
-Dzip7.home=<pathToPacker7zip>
-Dcgsc.7z=<pathToCGSZ.7z>
-Dhvmec.bz2=<pathToHVMEC.tar.bz2>
-Dupx.home=<pathToUPX>

Use OpenJDK For Linux users and PulseAudio for sound output:
============================================================
OpenJDK + OpenJFX + PulseAudio Mixer is required!
Execute the following commands:
sudo apt-get install openjdk-8-jdk
sudo apt-get install openjfx
sudo apt-get install pavucontrol

Some soundcards don't work well with the default pulseaudio settings:
read here: https://askubuntu.com/questions/371595/for-pulseaudio-what-does-tsched-do-and-what-are-the-defaults
Therefore, if you have trouble with crackling sound, please enter in a terminal:
"sudo vi /etc/pulse/default.pa"
and replace line:
"load-module module-udev-detect"
with
"load-module module-udev-detect tsched=0"
Now stop and start pulseaudio again without root rights:
"pulseaudio -k"
"pulseaudio -D"

Hard-wire HardSID4U: connect mixed/out into the Microfone/in of your computer:
==============================================================================
In Ubuntu Linux with Pulseaudio installed transport Microfone sound to speakers;
Open a terminal and type:
parec --latency-msec=1 | pacat --latency-msec=1
Lower your microphone volume level to prevent overdrive noise

Java8 in Eclipse:
=================

In Eclipse Preferences/Java/Installed JREs
Add:
/usr/lib/jvm/java-8-openjdk-amd64/jre
X Use as default Java

Java 9,10,11:
=============
Since Java11 JavaFX is no longer bundled with Java!
You will have to use a separate POM for JSIDPlay2 to include JavaFX. Thanks to Oracle :-(

Therefore, use the following command:
mvn -Djavafx.platform=win -f pom-java11.xml clean install			(Use [win|linux|mac])
instead of:
mvn clean install

Java9 and successor versions require the configured required modules and since Java11
the module path to JavaFX at startup of JSIDPlay2.
I have added an additional launch in Eclipse: "Sidplay2Frame (Since Java9)".
However to use this new launch in Eclipse you must 1st: rename pom-java11.xml to pom.xml
and 2nd to launch "mvn clean install (Java11)". Then, you can start JSIDPlay2 using "Sidplay2Frame (Since Java9)".

Eclipse JavaFX support:
=======================
1. Install e(fx)clipse
2. To get a content assistant on javafx css files:
Right click on your project -> properties -> Java build path -> libraries -> add library -> javaFX SDK
To edit .fxml files with FXML Editor:
Right click on .fxml file: Open With -> Other... -> FXML Editor (Check "Use it for all '*.fxml' files") -> OK
To specify text resource inside .fxml file use for example:
<?scenebuilder-preview-i18n-resource GameBasePage.properties?>
To use style sheets inside .fxml file use for example:
<Scene stylesheets="@JSidPlay2.css"> ...
To use JavaFX Preview view in Eclipse, change root tag in fxml file (uncomment commented out alternative version)
Eventually uncomment line in C64VBox.java (see TODO marker), still not sure, why some of the layouts need that.

How to Create a HTTPS certificate and install easily for your Apache web-server:
================================================================================
https://certbot.eff.org/lets-encrypt/ubuntutrusty-apache

General tips:
=============

For support of double click on the JAR to start JSIDPlay2:
Right click on jsidplay-<version>.jar
Open with...
Choose a different one...
/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java -jar
X Remember file type assignment

Shrink jsiddevice using packer UPX:
upx.exe --lzma --best --ultra-brute jsiddevice.exe

find out available JavaFX style classes of a node in the scene graph:
	private void dump(Node n, int depth) {
		for (int i = 0; i < depth; i++)
			System.out.print("  ");
		System.out.println(n);
		if (n instanceof Parent)
			for (Node c : ((Parent) n).getChildrenUnmodifiable())
				dump(c, depth + 1);
	}

Off-Topic:
==========

Chameleon Command-Line to send programs:
sudo gedit /lib/udev/rules.d/100-local-permissions.rules:
SUBSYSTEMS=="usb" ATTRS{idVendor}=="18d8" ATTRS{idProduct}=="201d" MODE:="0777" SYMLINK+="Chameleon"

RESET (reset.txt consists of exactly one zero byte)
./chacocmd  --addr  0x80000000 --writemem ./reset.txt

SEND PROGRAM
./chacocmd  --addr  0x0801 --writemem radiantx_spiral_silicon_towers.mem 

Shazam in java :-)
http://royvanrijn.com/blog/2010/06/creating-shazam-in-java/

TODO:
=====
libresidfp introduced a new envelopegenerator and a new filter8580 recently.
(Nov. 2016)

Test hardware support (hardsid) with Java11.
How to deploy win, linux and mac version with Java11 for the Web-site?

Docs: How to launch using java11 (new exe file), using JavaFX11 bundled dependencies

Wait for proguard to support Java11 and adopt changes
