Build JSIDPlay2
===============
"mvn clean install"
-> target/standalone	-	local PC version
-> target/deploy		-	website version

Deploy JSIDPlay2
================
"mvn clean deploy"
does mvn clean install
and uploads target/deploy to web-server

Build JSIDPlay2 and runs UI-tests
=================================
mvn clean install -P release			"You should disable screensaver to not interfere with the tests"

Set the following optional properties in Eclipse to deploy additional online features:
Open Preferences/Run/Debug/StringSubstitution or at command line: using -D

-Dgb64.mdbfile=<pathToGameBase64.mdb>
-Dhvsc.7z=<pathToHVSC.7z>
-Dcgsc.7z=<pathToCGSZ.7z>
-Dhvmec.zip=<pathToHVMEC.zip>
-Dupx.exe=<pathToUPX>

Use Oracle Java8
================
This is my recommendation, because JavaFX is already included!

OpenJDK
=======
If you prefer more recent versions get your installer here: https://adoptopenjdk.net

Java 9,10,11 in Eclipse:
========================
Since Java11 - JavaFX is no longer bundled with Java!
We will have to use a separate POM for JSIDPlay2 to include JavaFX. Thanks to Oracle :-(

Therefore, use the following build command:
mvn -Djavafx.platform=linux -f pom-java11.xml clean install		"(Specify platform: [win|linux|mac])"
instead of:
mvn clean install

Java9 and successor versions require additional launch parameters.
The configured required modules and the module path to JavaFX at startup of JSIDPlay2.
I have added an additional launch in Eclipse: "Sidplay2Frame (Since Java9)".
However to use this new launch in Eclipse you must
1st: Add Java11 to Eclipse for the project build and set as default: Window/Preferences, Java/Installed JREs
2nd: Copy the contents of pom-java11.xml to pom.xml (Eclipse will always use pom.xml) and
3rd: Launch "mvn clean install (Java11)".
Then, you can start JSIDPlay2 using launch "Sidplay2Frame (Since Java9)".

Eclipse JavaFX support:
=======================
1. Install e(fx)clipse
2. To get a content assistant on javafx css files:
Right click on your project -> properties -> Java build path -> libraries -> add library -> javaFX SDK
3. To edit .fxml files with FXML Editor:
Right click on .fxml file: Open With -> Other... -> FXML Editor (Check "Use it for all '*.fxml' files") -> OK
4. To use JavaFX Preview view in Eclipse, change root tag in fxml file (uncomment the commented out alternative version)
Eventually uncomment line in C64VBox.java (see TODO marker), still not sure, why some of the layouts need that.

General tips:
=============

How to Create a HTTPS certificate and install easily for your Apache web-server:
https://certbot.eff.org/lets-encrypt/ubuntutrusty-apache

For support of double click on the JAR to start JSIDPlay2:
Right click on jsidplay-<version>.jar
Open with...
Choose a different one...
/home/ken/Downloads/jdk1.8.0_211/bin/java -jar
X Remember file type assignment

How to find out available JavaFX style classes of a node in the scene graph?
	private void dump(Node n, int depth) {
		for (int i = 0; i < depth; i++)
			System.out.print("  ");
		System.out.println(n);
		if (n instanceof Parent)
			for (Node c : ((Parent) n).getChildrenUnmodifiable())
				dump(c, depth + 1);
	}

Hard-wire HardSID4U - connect mixed/out into the Microfone-in connector of your computer:
In Ubuntu Linux with Pulseaudio installed transport Microfone sound to speakers;
Open a terminal and type:
parec --latency-msec=1 | pacat --latency-msec=1
Lower your microphone volume level to prevent overdrive noise

MYSQL - get estimate row count of database:
select  table_rows
from    information_schema.tables
where   table_schema = 'whatssid'
  and   table_name = 'HashTable' ;

This will display list of all tables that has minimum of 500MB of unused space:
select table_name,
round(data_length/1024/1024) as data_length_mb, 
round(data_free/1024/1024) as data_free_mb 
 from information_schema.tables 
 where round(data_free/1024/1024) > 500 
 order by data_free_mb;
 
optimize table:
mysql -u newuser -p"password"
use whatssid
OPTIMIZE TABLE HashTable

Heap Memory Analyzer - To find memory leaks you can use:
jmap -dump:format=b,file=heap.bin <JavaProcessId>
Install Eclipse MAT (Heap Memory Analyzer) (https://www.eclipse.org/mat/)
Increase max memory, if required to load huge heap dumps in file MemoryAnalyzer.ini:
-Xmx=5g
In MAT - Load heap dump: File/Open heap.bin

Chameleon C64 hardware - Command-Line to send programs:
sudo gedit /lib/udev/rules.d/100-local-permissions.rules:
SUBSYSTEMS=="usb" ATTRS{idVendor}=="18d8" ATTRS{idProduct}=="201d" MODE:="0777" SYMLINK+="Chameleon"
RESET (reset.txt consists of exactly one zero byte)
./chacocmd  --addr  0x80000000 --writemem ./reset.txt
SEND PROGRAM
./chacocmd  --addr  0x0801 --writemem radiantx_spiral_silicon_towers.mem 

TODO:
=====
libresidfp introduced a new envelopegenerator and a new filter8580 recently.
(Nov. 2016)

- Wait for proguard to support Java11 and adopt changes
- App: download sid register writes and siddump
- Playlists are wanted to be shared online
