== [[NetSIDDev]]Network SID Device

=== Implementation of a network SID device protocol

You can implement your own SID device (hardware or software based) and control it using JSIDPlay2.
The network SID device protocol has been defined to communicate with these implementations.

JSIDPlay2 SID-emulation integration protocol. It is possible to have
JSIDPlay2 take over the duty of the SID playback for a C64 emulator/player.
Every jsidplay2 instance tries to open port 6581 where they will listen to
connections that describe SID activity with the following protocol.

==== General Overview

Version 2 and 3 of the protocol is structured as a request-response protocol:

* Requests are variable length, with minimum packet size 4 bytes. There are
3 fields and an amorphous data blob:
** 8-bit unsigned as command.
** 8-bit unsigned as SID number.
** 16-bit unsigned as length of data attached to header in bytes.
** Data (if any)

* All commands are ACKed with a response packet that takes one of the
following forms:
** OK means that the commands were accepted by server and can be discarded
by client. No data will be appended to response.
** BUSY means that no part of the current command was accepted due to filled
queue condition, and that client should wait and retry it later. 1
millisecond could be a suitable delay before retry. Queue length is limited
both by number of events and maximum time drift between playback clock and
client clock. No data will be attended to response.
** READ: successful read operation, one byte value follows that is the value
read from SID.
** VERSION: response to VERSION operation. Version number will be appended
to response.
** COUNT: number of SIDs supported by network device.
** INFO: info packet, which contains model code and zero-padded 20-byte
UTF-8 encoded string representing model name.


* Maximum packet length is 64k + header length. It is suggested that only short
packets are transmitted, in the order of 1k and containing no more than about
1 ms worth of events. Otherwise the client-server desync brings jitter that
may have unpleasant consequences. At the limit it's possible to simply send a
fixed header that describes a single write with each packet, but this is
probably measurably less efficient.

==== Command Overview

* Structure of data is specific to command. Some commands require data, others
will not use data even if such was provided. Some commands require specific
lengths for the data packets. If data length is not correct, results are
undefined. Known commands are identified by small integers, starting from 0:

** FLUSH (0): destroy queued data on all SIDs, and cease audio production.

*** sid number is ignored.
*** data packet must be 0 length.
*** should probably be followed by RESET (SID is in unpredictable state).
*** always returns OK

** TRY_SET_SID_COUNT (1): set number of SID devices available for writing

*** sid number equals the count of SIDs wanted.
*** data packet must be 0 length.
*** returns BUSY until audio quiescent, otherwise OK.

** MUTE (2): mute/unmute a voice on specified SID

*** data packet must contain two 8-bit unsigned bytes:

**** the voice number from 0 to 3 (voice number 3 (digi) is supported since
version 3. For version 2 of the protocol only voice numbers 0 to 2 are
supported.
**** 0 or 1 to disable/enable voice
*** this command bypasses buffer and takes immediate effect.
*** always returns OK

** TRY_RESET (3): reset all SIDs, setting volume to provided value.

*** data packet must be a 8-bit unsigned value which is written to volume
register.
*** returns BUSY until audio quiescent, otherwise OK.

** TRY_DELAY (4): inform emulation that no events have occurred for a given
count of cycles

*** data packet must be 16-bit unsigned value interpreted as delay in C64
clocks. 0 is not allowed.
*** allows audio generation in absence of other activity.
*** returns BUSY if there is already enough data for playback, otherwise OK.

** TRY_WRITE (5): try to queue a number of write-to-sid events.

*** data packet must be 4*N bytes long, repeating this structure:

**** 16-bit unsigned value interpreted as delay before the write in C64
clocks.
**** 8-bit unsigned SID register number from 0x00 to 0x1f.
**** 8-bit unsigned data value to write
*** returns BUSY if there is already enough data for playback, otherwise OK.

** TRY_READ (6): reads SID chip register.

*** data packet must be a 4n+3 bytes long, where n >= 0. The protocol used
for the first n packets is the same as the TRY_WRITE protocol, returning
potentially BUSY if the delay implied by the READ, or the WRITEs can not yet
be buffered.
*** Read packet structure trails the write packet structure:

**** 16-bit unsigned value interpreted as delay before the read in C64 clocks.
**** 8-bit unsigned SID register number from 0x00 to 0x1f.

*** returns BUSY if there is already enough data for playback, otherwise READ
and a data byte, which is the read value from SID.

** GET_VERSION (7): returns the version of the SID Network protocol.

*** sid number is ignored.
*** data packet must be 0 length.
*** returns 2 bytes: VERSION and a data byte, which is the version of the SID
Network protocol.

** TRY_SET_SAMPLING (8): set the resampling method for all SID devices.

*** sid number is ignored.
*** data packet is 1 byte long and contains:
**** 0 for pure decimator (low quality)
**** 1 for low-pass filtered decimator (high quality).

*** returns BUSY until audio quiescent, otherwise OK.

** SET_CLOCKING (9): set the clock source speed for all SID devices.

*** sid number is ignored.
*** data packet is 1 byte long and contains:
**** 0 for PAL
**** 1 for NTSC
*** returns BUSY until audio quiescent, otherwise OK.

** GET_CONFIG_COUNT (10): Query number of SID configurations supported by
server.
*** sid number is ignored.</li>
*** data packet is ignored and should be 0 length.
*** always returns COUNT and a 8-bit unsigned value that is 1 larger than the
maximum valid configuration.

** GET_CONFIG_INFO (11): query the name and model of the SID configuration.

*** data packet is ignored and should be 0 length.
*** returns INFO and 8-bit unsigned-value and a string in ISO-8859-1 encoding
with a maximum of 255 characters excluding a null terminated byte
**** INFO code
**** Model: 0 = 6581, 1 = 8580
**** Model name (max. 255 chars + 1 null terminated byte)

** SET_SID_POSITION (12): set sid position on the audio mix
*** data packet is 1 byte long and contains:
**** -100 to 0: audio is panned to left
**** 0 to 100: audio is panned to right
*** always returns OK.

** SET_SID_LEVEL (13): set SID level adjustment in dB
*** data packet is 1 byte long and contains:
**** 8-bit signed dB adjustment in cB (centibels), 0 means no adjustment
*** always returns OK.

** SET_SID_MODEL (14):

*** data packet is 1 byte long and contains:
**** 8-bit unsigned value between 0 <= value <= max_config-1
*** always returns OK.

