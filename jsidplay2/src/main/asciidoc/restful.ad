== RESTful web-services in JSIDPlay2

You can implement your own client to access this emulator.
You can access this emulator by using the following service methods to stream music or browse music collection directories.
The service methods are available as soon as you click start in the built-in App Server in JSIDPlay2.

=== Launch JSIDPlay2 app server

Note: You can start the built-in App Server standalone using the following command in a console window, instead:

[source,subs="attributes+"]
----
java -classpath jsidplay2-{version}.jar ui.servlets.JSIDPlay2Server # <1>
----
<1> Launch the JSIDPlay2 app server standalone

For all supported parameters, please type:
[source,subs="attributes+"]
----
java -classpath jsidplay2-{version}.jar ui.servlets.JSIDPlay2Server --help # <1>
----
<1> Show usage of the JSIDPlay2 app server standalone

=== Preparation

==== Examples

All the following RESTful service methods of JSIDPlay2 AppServer are using your configured music collections HVSC and CGSC.
To make the following examples to work, first configure HVSC and CGSC music collection in JSIDPlay2, properly!
If you can browse these music collections in JSIDPlay2 the service methods can browse and stream the contained tune files as well.

==== Security

Basic authentication is used calling the following services with the following credentials:

* *Username:* jsidplay2
* *Password:* jsidplay2!

You can change the settings of the user or add an administrative user by an external configuration file.
The file must be named: "realm.properties" located in your home directory and be readable on startup of the server.
The reason why you can add an administrative user is to grant access to additional private music collections for him.

Example:
[source,subs="attributes+"]
----
#
# This file defines users passwords and roles for a HashUserRealm
#
# The format is
#  <username>: <password>[,<rolename> ...]
#
# Passwords may be clear text, obfuscated or checksummed.  The class
# org.eclipse.jetty.util.security.Password should be used to generate obfuscated
# passwords or password checksums
#
# If DIGEST Authentication is used, the password must be in a recoverable
# format, either plain text or OBF:.
#
#jetty: MD5:164c88b302622e17050af52c89945d44,user
#admin: CRYPT:adpexzg3FUZAk,server-administrator,content-administrator,admin,user
#other: OBF:1xmk1w261u9r1w1c1xmq,user
#plain: plain,user
#user: password,user
# This entry is for digest auth.  The credential is a MD5 hash of username:realmname:password
#digest: MD5:6e120743ad67abfbc385bc2bb754e297,user

jsidplay2: jsidplay2!,user
administrator: MD5:0bd6506986ec42e732ffb866d33bb14e,admin
---- 
All known roles are user and admin.

==== Use Self-signed certificate

JSIDPlay2 app server supports HTTP or HTTPS (and both at once).
To configure the HTTPS certificate, please set the keystore, manager password and keystore password
either within the user interface of JSIDPlay2 or refer to the command-line parameters of JSIDPlay2 app server mentioned above.

*Warning:* These passwords will always be deleted after exit of JSIDPlay2 for security reasons!

To create a self-signed certificate you must use the keytool command of the java installation
[source,subs="attributes+"]
----
keytool -genkey -alias sitename -keyalg RSA -keystore keystore.jks -keysize 2048 <1>
----
<1> *Warning:* A self-signed certificate is only a temporary solution, since
it creates a warning message in the browser window and is
unaccepted by an android client, normally!

==== Use trusted certificate
This example is related to Letâ€™s Encrypt and Apache2 installation on Linux.

If your web-server and JSIDPlay2 server is both in the same domain, then you can use HTTPS using the same certificate for both:
your web-server and JSIDPlay2 AppServer.

But first lets make the Apache2 web-server secure, which is very easy with Let's Encrypt:
[source,subs="attributes+"]
----
sudo apt-get install software-properties-common
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install python-certbot-apache
sudo certbot --apache
----

For automatic renewal we need a cron job:
[source,subs="attributes+"]
----
sudo crontab -e

# Add this to the crontab and save it:
40 3 * * 0 certbot -q renew # <1>
----

*Note:* The certificate expires every 3 month. If the certificate is not expired, the renewal will not be done. Therefore we can use a shorter period of time.

To re-use the created certificates for JSIDPlay2 AppServer, we will put them into a Java Keystore:
[source,subs="attributes+"]
----
sudo cat /etc/letsencrypt/live/haendel.ddns.net/{cert.pem,chain.pem,fullchain.pem	,privkey.pem} \
	> fullchain.pem # <1>
openssl pkcs12 -export -out fullchain.pkcs12 -in fullchain.pem -password pass:jsidplay2 # <2>
keytool -genkey \
	-keyalg RSA \
	-alias jsidplay2 \
	-keystore jsidplay2.ks \
	-storepass jsidplay2 \
	-keypass jsidplay2 \
	-dname 'cn="JSIDPlay2", ou="JSIDPlay2", o="Open Source", l="Berlin", c=DE' # <3>
keytool -delete -alias jsidplay2 -keystore jsidplay2.ks -storepass jsidplay2 # <4>
keytool -v -importkeystore \
	-srckeystore fullchain.pkcs12 \
	-destkeystore jsidplay2.ks \
	-deststoretype JKS \
	-srcstorepass jsidplay2 \
	-deststorepass jsidplay2 # <5>
sudo rm fullchain.pkcs12
keytool -keystore jsidplay2.ks -changealias -alias 1 -destalias jsidplay2 \
	-storepass jsidplay2 # <6>
cd ~/Downloads/jsidplay2-3.9 
java -server -classpath jsidplay2-3.9.jar ui.servlets.JSIDPlay2Server \
	--appServerKeystore ~/jsidplay2.ks \
	--appServerManagerPassword jsidplay2 \
	--appServerKeystorePassword jsidplay2 \
	--appServerConnectors HTTP_HTTPS & # <7>
----
<1> create one big certificate file
<2> convert certificate file to PKCS12 required by keytool
<3> Create empty keystore, first we create one...
<4> ...then we remove contents again
<5> Import certificate into keystore, first we import the certificates
<6> ...then we need to change the alias name
<7> Launch JSIDPlay2 AppServer with HTTPS enabled

==== Access from the Internet

To use your client from within your private local area network does not require additional preparations, you just need to know and reach the IP address, where JSIDPlay2 is running on.

But, if you want to use a client from any location in the internet, that would require some additional preparations:

. You will need a hostname which resolves to the IP-address of your always reachable server, where JSIDPlay2 is running on (e.g. using a provider like https://freeddns.noip.com and configure dynamic DNS inside your router)
. You will need to configure your router to redirect requests to that server: port forwarding. You should forward requests using the port, that you configured for the built-in App server in JSIDPlay2. This will make it necessary to configure a fixed IP address for your server within your local area network, beforehand. Now you can forward all related traffic to your server.

Keep in mind, that opening ports in your firewall will raise the security risk. You will make yourself vulnerable to attacks from hackers.

Note: I will not take responsability for any risks or damages. Do this on your own risk!

=== JSIDPlay2 AppServer Usage of the RESTful services

==== Get all SID filter names (required to stream SID as MP3 later)

link:${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/filters[${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/filters]

Note: SID filter names are prefixed with the emulation engine (RESID or RESIDFP) and the SID model (MOS6581 or MOS8580) and appended by their name, e.g. RESID_MOS8580_FilterAverage8580, That way filters can be grouped or sorted on the client side.

==== Get music collection directory

link:${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/directory/C64Music/MUSICIANS/D/DRAX/[${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/directory/C64Music/MUSICIANS/D/DRAX/]

You can access any sub-directory of your music collection to navigate to the tunes you want to play on the client side.
HVSC music collection root path starts with "/C64Music/" and CGSC music collection starts with "/CGSC/". Please append any sub-directory behind that root path to get the desired directory contents.
Directory type entries are appended by a slash, whereas file type entries like tunes ends with their file extensions.
To each directory contents a parent folder entry will be added appended by "../". Following that directory entry, you can easily navigate back to the parent directory.
Additionally you can specify a file extension filter using the parameter filter, e.g. ".*\\.(sid|dat|mus|str|mp3)$"

You can add more collections by creating an external configuration file located in your home directory.
The file must be named: "directoryServlet.properties" and be readable on startup of the server.

Example:
[source,subs="attributes+"]
----
/MP3=/media/nas1/mp3,true <1>
---- 
<1> Syntax is: "<localDirectoryNameInTheRequest>" = "<realDirectoryName>" "," "<adminRoleRequired>"
In the request above simply replace "/jsidplay2service/JSIDPlay2REST/directory/C64Music/..."
by "/jsidplay2service/JSIDPlay2REST/directory/MP3" to access your collection

==== Get tune infos

link:${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/info/C64Music/MUSICIANS/D/DRAX/Acid.sid[${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/info/C64Music/MUSICIANS/D/DRAX/Acid.sid]

Return a list of information of the specified tune file.

==== Get contents of the first SID favorites tab

link:${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/favorites[${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/favorites]

Return a list of favorite tune files.

==== Get composer photo

link:${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/photo/C64Music/MUSICIANS/D/DRAX/Acid.sid[${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/photo/C64Music/MUSICIANS/D/DRAX/Acid.sid]

Return a photo of a well-known tune composer to be displayed on the client side.

==== Download SID

link:${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/download/C64Music/MUSICIANS/D/DRAX/Acid.sid[${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/download/C64Music/MUSICIANS/D/DRAX/Acid.sid]

Download a tune file of your music collection to the client.

==== Stream SID as MP3

link:${protocol}://127.0.0.1:${port}/jsidplay2service/JSIDPlay2REST/convert/C64Music/MUSICIANS/D/DRAX/Acid.sid?defaultLength=03:00&enableSidDatabase=true&single=true&loop=false&bufferSize=65536&sampling=RESAMPLE&frequency=MEDIUM&defaultEmulation=RESIDFP&defaultModel=MOS8580&filter6581=FilterAlankila6581R4AR_3789&stereoFilter6581=FilterAlankila6581R4AR_3789&thirdFilter6581=FilterAlankila6581R4AR_3789&filter8580=FilterAlankila6581R4AR_3789&stereoFilter8580=FilterAlankila6581R4AR_3789&thirdFilter8580=FilterAlankila6581R4AR_3789&reSIDfpFilter6581=FilterAlankila6581R4AR_3789&reSIDfpStereoFilter6581=FilterAlankila6581R4AR_3789&reSIDfpThirdFilter6581=FilterAlankila6581R4AR_3789&reSIDfpFilter8580=FilterAlankila6581R4AR_3789&reSIDfpStereoFilter8580=FilterAlankila6581R4AR_3789&reSIDfpThirdFilter8580=FilterAlankila6581R4AR_3789&digiBoosted8580=true&cbr=64&vbrQuality=0&vbr=true[jsidplay2service/JSIDPlay2REST/convert/C64Music/MUSICIANS/D/DRAX/Acid.sid?defaultLength=03:00&enableSidDatabase=true&single=true&loop=false&bufferSize=65536&sampling=RESAMPLE&frequency=MEDIUM&defaultEmulation=RESIDFP&defaultModel=MOS8580&filter6581=FilterAlankila6581R4AR_3789&stereoFilter6581=FilterAlankila6581R4AR_3789&thirdFilter6581=FilterAlankila6581R4AR_3789&filter8580=FilterAlankila6581R4AR_3789&stereoFilter8580=FilterAlankila6581R4AR_3789&thirdFilter8580=FilterAlankila6581R4AR_3789&reSIDfpFilter6581=FilterAlankila6581R4AR_3789&reSIDfpStereoFilter6581=FilterAlankila6581R4AR_3789&reSIDfpThirdFilter6581=FilterAlankila6581R4AR_3789&reSIDfpFilter8580=FilterAlankila6581R4AR_3789&reSIDfpStereoFilter8580=FilterAlankila6581R4AR_3789&reSIDfpThirdFilter8580=FilterAlankila6581R4AR_3789&digiBoosted8580=true&cbr=64&vbrQuality=0&vbr=true]

Return a mp3 stream of the specified tune. On the server side the emulator is started and streams the sound output back to the client.
All parameters are used to specify emulation settings that should be used.
Especially the MP3 parameters control the quality and size of the returned mp3 stream (vbr, cbr and vbrQuality).
Using these parameter gives you the control about mobile phone transfer data volume and especially the costs that arise, if you stream over the internet using your specific mobile phone provider contract (as nobody has an unlimited flat rate these days). It is recommended to use less data volume with less precision (lower quality) for connections over the internet and higher data volume with more precision (higher quality) inside your private local network, e.g. WLAN connection.
I have implemented an example android app as a client for the built-in App server of JSIDPlay2.
My android app uses constant bitrate of 64K for the internet and variable bitrate and highest quality for my private WLAN.
This is according to my recommendation above.

For a description of all possible parameters please call console player's usage, because
they are exactly the same. But keep in mind you must use the gnu-style parameter syntax and leave away "--":
[source,subs="attributes+"]
----
cd Downloads/jsidplay2-{version}
java -jar jsidplay2_console-{version}.jar --help # <1>
---- 
<1> Launch User interface version


*Note:* I will not take responsability for any costs or risks, that arise from streaming mp3 files from the internet. Do this on your own risk!

*Info:* All Parameter names match exactly the command line parameter names of the console player in gnu style (prepended by --).
For example defaultLength=180 sets the default song length.

