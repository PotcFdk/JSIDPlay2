package libpsid64;

public class Screen {
	public Screen() {
		
	}

	    public void clear() {
	        byte c = iso2scr ((short) ' ');
	        for (int i = 0; i < m_screenSize; ++i)
	        {
	    	m_screen[i] = c;
	        }
	    }
	    public void home() {
	        m_x = 0;
	        m_y = 0;
	    }
	    public void move(int x, int y) {
	        if ((x < m_width) && (y < m_height))
	        {
	    	m_x = x;
	    	m_y = y;
	        }
	    }
	    public void putchar(int c) {
	        if (c == '\n')
	        {
	    	m_x = 0;
	    	moveDown();
	        }
	        else
	        {
	    	int offs = offset(m_x, m_y);
	    	m_screen[offs] = iso2scr ((short) c);
	    	moveRight();
	        }
	    }
	    public void write(String str) {
	    	for (int i = 0; i < str.length(); i++) {
		    	putchar(str.charAt(i));
			}
	    }

	    public void poke(int x, int y, short value) {
	        if ((x < m_width) && (y < m_height))
	        {
	    	int offs = offset (x, y);
	    	m_screen[offs] = (byte) value;
	        }
	    }

	    public final byte[] getData()
	    {
	    	return m_screen;
	    }

	    public int getDataSize()
	    {
	   return m_screenSize;
	    }

	    public int getX() 
	    {
	   return m_x;
	    }

	    public int getY() 
	    {
	   return m_y;
	    }

	    public void moveRight()
	    {
	   if (m_x < (m_width - 1))
	   {
	       ++m_x;
	   }
	    }

	    public void moveDown()
	    {
	   if (m_y < (m_height - 1))
	   {
	       ++m_y;
	   }
	    }

		   static final byte scrtab[] = {
		       (byte) 0x80, (byte) 0x81, (byte) 0x82, (byte) 0x83, (byte) 0x84, (byte) 0x85, (byte) 0x86, (byte) 0x87, // 0x00
		       (byte) 0x88, (byte) 0x89, (byte) 0x8a, (byte) 0x8b, (byte) 0x8c, (byte) 0x8d, (byte) 0x8e, (byte) 0x8f, // 0x08
		       (byte) 0x90, (byte) 0x91, (byte) 0x92, (byte) 0x93, (byte) 0x94, (byte) 0x95, (byte) 0x96, (byte) 0x97, // 0x10
		       (byte) 0x98, (byte) 0x99, (byte) 0x9a, (byte) 0x9b, (byte) 0x9c, (byte) 0x9d, (byte) 0x9e, (byte) 0x9f, // 0x18
		       0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, // 0x20  !"#$%&'
		       0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, // 0x28 ()*+,-./
		       0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, // 0x30 01234567
		       0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, // 0x38 89:;<=>?
		       0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, // 0x40 @ABCDEFG
		       0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, // 0x48 HIJKLMNO
		       0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, // 0x50 PQRSTUVW
		       0x58, 0x59, 0x5a, 0x1b, (byte) 0xbf, 0x1d, 0x1e, 0x64, // 0x58 XYZ[\]^_
		       0x27, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // 0x60 `abcdefg
		       0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, // 0x68 hijklmno
		       0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, // 0x70 pqrstuvw
		       0x18, 0x19, 0x1a, 0x1b, 0x5d, 0x1d, 0x1f, 0x20, // 0x78 xyz{|}~ 
		       0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0x80
		       0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0x88
		       0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0x90
		       0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0x98
		       0x20, 0x21, 0x03, 0x1c, (byte) 0xbf, 0x59, 0x5d, (byte) 0xbf, // 0xa0  ¡¢£¤¥¦§
		       0x22, 0x43, 0x01, 0x3c, (byte) 0xbf, 0x2d, 0x52, 0x63, // 0xa8 ¨©ª«¬­®¯
		       0x0f, (byte) 0xbf, 0x32, 0x33, 0x27, 0x15, (byte) 0xbf, (byte) 0xbf, // 0xb0 °±²³´µ¶·
		       0x2c, 0x31, 0x0f, 0x3e, (byte) 0xbf, (byte) 0xbf, (byte) 0xbf, 0x3f, // 0xb8 ¸¹º»¼½¾¿
		       0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x43, // 0xc0 ÀÁÂÃÄÅÆÇ
		       0x45, 0x45, 0x45, 0x45, 0x49, 0x49, 0x49, 0x49, // 0xc8 ÈÉÊËÌÍÎÏ
		       (byte) 0xbf, 0x4e, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x18, // 0xd0 ĞÑÒÓÔÕÖ×
		       0x4f, 0x55, 0x55, 0x55, 0x55, 0x59, (byte) 0xbf, (byte) 0xbf, // 0xd8 ØÙÚÛÜİŞß
		       0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, // 0xe0 àáâãäåæç
		       0x05, 0x05, 0x05, 0x05, 0x09, 0x09, 0x09, 0x09, // 0xe8 èéêëìíîï
		       (byte) 0xbf, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, (byte) 0xbf, // 0xf0 ğñòóôõö÷
		       0x0f, 0x15, 0x15, 0x15, 0x15, 0x19, (byte) 0xbf, 0x19  // 0xf8 øùúûüışÿ
		   };

	    public static byte iso2scr(short c)
	    {
	   return scrtab[c];
	    }

	private static final int m_width = 40;
	private static final int m_height = 25;
	private static final int m_screenSize = m_width * m_height;

	private byte m_screen[] = new byte[m_screenSize];
	private int m_x;
	private int m_y;

	    private int offset(int x, int y)
	    {
	   return x + (m_width * y);
	    }

}
