package libsidutils.fingerprinting.ini;

public interface IFingerprintSection {

	/**
	 * Get INI file version.
	 * 
	 * @return INI file version
	 */
	int getVersion();

	/**
	 * Set configuration version
	 * 
	 * @param version configuration version
	 */
	void setVersion(int version);

	/**
	 * Getter of the number of peak points per subband in a cycle.
	 * 
	 * @return the number of peak points per subband in a cycle
	 */
	int getNPeaks();

	/**
	 * Setter of the number of peak points per subband in a cycle.
	 * 
	 * @param nPeaks the number of peak points per subband in a cycle
	 */
	void setNPeaks(int nPeaks);

	/**
	 * Getter of the window size of the FFT.
	 * 
	 * @return the window size of the FFT
	 */
	int getFftSize();
	
	/**
	 * Setter of the window size of the FFT.
	 * 
	 * @param fftSize the window size of the FFT
	 */
	void setFftSize(int fftSize);
	
	/**
	 * Getter of the overlap size of the FFT window.
	 * 
	 * @return the overlap size of the FFT window
	 */
	int getOverlap();
	
	/**
	 * Setter of the overlap size of the FFT window.
	 * 
	 * @param overlap the overlap size of the FFT window
	 */
	void setOverlap(int overlap);
	
	/**
	 * Getter of how many windows are included in one cycle.
	 * 
	 * @return how many windows are included in one cycle
	 */
	int getC();
	
	/**
	 * Setter of how many windows are included in one cycle.
	 * 
	 * @param c how many windows are included in one cycle
	 */
	void setC(int c);
	
	/**
	 * Getter of compares with the range of neighbors when taking the peak point.
	 * 
	 * @return compares with the range of neighbors when taking the peak point
	 */
	int getPeakRange();
	
	/**
	 * Setter of compares with the range of neighbors when taking the peak point.
	 * 
	 * @param peakRange compares with the range of neighbors when taking the peak point
	 */
	void setPeakRange(int peakRange);

	/**
	 * Getter of time range when the point is taken, in seconds.
	 * 
	 * @return time range when the point is taken, in seconds
	 */
	float[] getRangeTime();
	
	/**
	 * Setter of time range when the point is taken, in seconds.
	 * 
	 * @param rangeTime time range when the point is taken, in seconds
	 */
	void setRangeTime(float[] rangeTime);

	/**
	 * Getter of the frequency range at which the point pair is taken, in units of frequency.
	 * 
	 * @return the frequency range at which the point pair is taken, in units of frequency
	 */
	float[] getRangeFreq();
	
	/**
	 * Setter of the frequency range at which the point pair is taken, in units of frequency.
	 * 
	 * @param rangeFreq the frequency range at which the point pair is taken, in units of frequency
	 */
	void setRangeFreq(float[] rangeFreq);

	/**
	 * Getter of divided subband, the value corresponds to the array index generated by the FFT.
	 * 
	 * @return the divided subband, the value corresponds to the array index generated by the FFT
	 */
	int[] getBand();
	
	/**
	 * Setter of divided subband, the value corresponds to the array index generated by the FFT.
	 * 
	 * @param band divided subband, the value corresponds to the array index generated by the FFT
	 */
	void setBand(int[] band);

	/**
	 * Getter of minimum frequency.
	 * 
	 * @return minimum frequency
	 */
	int getMinFreq();
	
	/**
	 * Setter of minimum frequency.
	 * 
	 * @param minFreq minimum frequency
	 */
	void setMinFreq(int minFreq);

	/**
	 * Getter of maximum frequency.
	 * 
	 * @return maximum frequency
	 */
	int getMaxFreq();
	
	/**
	 * Setter of maximum frequency.
	 * 
	 * @param maxFreq maximum frequency
	 */
	void setMaxFreq(int maxFreq);

	/**
	 * Getter of minimum energy.
	 * 
	 * @return minimum energy
	 */
	int getMinPower();
	
	/**
	 * Setter of minimum energy.
	 * 
	 * @param minPower minimum energy
	 */
	void setMinPower(int minPower);


}