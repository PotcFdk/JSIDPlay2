#!/usr/bin/jython

import socket, struct, time

class JSIDPlay2er(object):
    __slots__ = ['dev', 'cmdBuf']
    def __init__(self):
        self.dev = socket.socket()
        self.cmdBuf = ""
        self.dev.connect(("localhost", 6581))

        # try set sid count
        self.serverSuccess("\x01\x02\x00\x00")
        # set sid 0 configuration = 0
        self.serverSuccess("\x0e\x00\x00\x01\x00")
        # set sid 1 configuration = 3
        self.serverSuccess("\x0e\x01\x00\x01\x03")
        # pan sid 0 left
        #self.serverSuccess("\x0c\x00\x00\x01\xc0");
        # set sid 0 about 6.4 dB down
        #self.serverSuccess("\x0d\x00\x00\x01\xc0");

        self.poke(0x18, 0xf, 0);

    def serverSuccess(self, data):
        self.dev.sendall(data);
        result = self.dev.recv(1)
        if result != "\x00":
            raise RuntimeError("Failed")

    def protocol(self, reg, val, delay):
        if delay < 0 or delay > 65535:
            raise RuntimeError, "invalid delay: %d" % delay
        if reg < 0 or reg > 31:
            raise RuntimeError, "invalid register: %d" % c64reg
        if val < 0 or val > 255:
            raise RuntimeError, "invalid valuer: %d" % c64reg
        return struct.pack(">HBBHBB", delay, reg, val, 0, reg|0x20, val)

    def poke(self, reg, val, delay):
        self.cmdBuf += self.protocol(reg, val, delay)
        if len(self.cmdBuf) < 1024:
            return;

        data = "\x05\x00\x04\x00" + self.cmdBuf
        while True:
            self.dev.sendall(data);
            result = self.dev.recv(1)

            # OK
            if result == "\x00":
                self.cmdBuf = ""
                break;

            # BUSY
            if result == "\x01":
                time.sleep(0.1);
                continue

            # Other/error
            raise RuntimeError("Server error feedback if any: " + self.dev.recv(10000))

# patterns
ptn00 = [0x83,0x00,0x37,0x01,0x3e,0x01,0x3e,0x03,0x3d,0x03,0x3e,0x03,0x43,0x03,0x3e,0x03,0x3d,0x03,0x3e,0x03,0x37,0x01,0x3e,0x01,0x3e,0x03,0x3d,0x03,0x3e,0x03,0x43,0x03,0x42,0x03,0x43,0x03,0x45,0x03,0x46,0x01,0x48,0x01,0x46,0x03,0x45,0x03,0x43,0x03,0x4b,0x01,0x4d,0x01,0x4b,0x03,0x4a,0x03,0x48]
ptn27 = [0x1f,0x4a]
ptn28 = [0x03,0x46,0x01,0x48,0x01,0x46,0x03,0x45,0x03,0x4a,0x0f,0x43]
ptn03 = [0xbf,0x06,0x48,0x07,0x48,0x01,0x4b,0x01,0x4a,0x01,0x4b,0x01,0x4a,0x03,0x4b,0x03,0x4d,0x03,0x4b,0x03,0x4a,0x3f,0x48,0x07,0x48,0x01,0x4b,0x01,0x4a,0x01,0x4b,0x01,0x4a,0x03,0x4b,0x03,0x4d,0x03,0x4b,0x03,0x48,0x3f,0x4c,0x07,0x4c,0x01,0x4f,0x01,0x4e,0x01,0x4f,0x01,0x4e,0x03,0x4f,0x03,0x51,0x03,0x4f,0x03,0x4e,0x3f,0x4c,0x07,0x4c,0x01,0x4f,0x01,0x4e,0x01,0x4f,0x01,0x4e,0x03,0x4f,0x03,0x51,0x03,0x4f,0x03,0x4c]
ptn05 = [0x83,0x04,0x26,0x03,0x29,0x03,0x28,0x03,0x29,0x03,0x26,0x03,0x35,0x03,0x34,0x03,0x32,0x03,0x2d,0x03,0x30,0x03,0x2f,0x03,0x30,0x03,0x2d,0x03,0x3c,0x03,0x3b,0x03,0x39,0x03,0x30,0x03,0x33,0x03,0x32,0x03,0x33,0x03,0x30,0x03,0x3f,0x03,0x3e,0x03,0x3c,0x03,0x46,0x03,0x45,0x03,0x43,0x03,0x3a,0x03,0x39,0x03,0x37,0x03,0x2e,0x03,0x2d,0x03,0x26,0x03,0x29,0x03,0x28,0x03,0x29,0x03,0x26,0x03,0x35,0x03,0x34,0x03,0x32,0x03,0x2d,0x03,0x30,0x03,0x2f,0x03,0x30,0x03,0x2d,0x03,0x3c,0x03,0x3b,0x03,0x39,0x03,0x30,0x03,0x33,0x03,0x32,0x03,0x33,0x03,0x30,0x03,0x3f,0x03,0x3e,0x03,0x3c,0x03,0x34,0x03,0x37,0x03,0x36,0x03,0x37,0x03,0x34,0x03,0x37,0x03,0x3a,0x03,0x3d,0x03,0x3e,0x07,0x3e,0x07,0x3f,0x07,0x3e,0x03,0x3c,0x07,0x3e,0x57]
ptn3a = [0x03,0x3e,0x07,0x3e,0x07,0x3f,0x07,0x3e,0x03,0x3c,0x07,0x3e,0x57]
ptn07 = [0x8b,0x00,0x3a,0x01,0x3a,0x01,0x3c,0x03,0x3d,0x03,0x3f,0x03,0x3d,0x03,0x3c,0x0b,0x3a,0x03,0x39,0x07,0x3a,0x81,0x06,0x4b,0x01,0x4d,0x01,0x4e,0x01,0x4d,0x01,0x4e,0x01,0x4d,0x05,0x4b,0x81,0x00,0x3a,0x01,0x3c,0x01,0x3d,0x03,0x3f,0x03,0x3d,0x03,0x3c,0x03,0x3a,0x03,0x39,0x1b,0x3a,0x0b,0x3b,0x01,0x3b,0x01,0x3d,0x03,0x3e,0x03,0x40,0x03,0x3e,0x03,0x3d,0x0b,0x3b,0x03,0x3a,0x07,0x3b,0x81,0x06,0x4c,0x01,0x4e,0x01,0x4f,0x01,0x4e,0x01,0x4f,0x01,0x4e,0x05,0x4c,0x81,0x00,0x3b,0x01,0x3d,0x01,0x3e,0x03,0x40,0x03,0x3e,0x03,0x3d,0x03,0x3b,0x03,0x3a,0x1b,0x3b,0x8b,0x05,0x35,0x03,0x33,0x07,0x32,0x03,0x30,0x03,0x2f,0x0b,0x30,0x03,0x32,0x0f,0x30,0x0b,0x35,0x03,0x33,0x07,0x32,0x03,0x30,0x03,0x2f,0x1f,0x30,0x8b,0x00,0x3c,0x01,0x3c,0x01,0x3e,0x03,0x3f,0x03,0x41,0x03,0x3f,0x03,0x3e,0x0b,0x3d,0x01,0x3d,0x01,0x3f,0x03,0x40,0x03,0x42,0x03,0x40,0x03,0x3f,0x03,0x3e,0x01,0x3e,0x01,0x40,0x03,0x41,0x03,0x40,0x03,0x3e,0x03,0x3d,0x03,0x3e,0x03,0x3c,0x03,0x3a,0x01,0x3a,0x01,0x3c,0x03,0x3d,0x03,0x3c,0x03,0x3a,0x03,0x39,0x03,0x3a,0x03,0x3c]
ptn09 = [0x83,0x00,0x32,0x01,0x35,0x01,0x34,0x03,0x32,0x03,0x35,0x03,0x34,0x03,0x32,0x03,0x35,0x01,0x34,0x01,0x32,0x03,0x32,0x03,0x3a,0x03,0x39,0x03,0x3a,0x03,0x32,0x03,0x3a,0x03,0x39,0x03,0x3a]
ptn2a = [0x03,0x34,0x01,0x37,0x01,0x35,0x03,0x34,0x03,0x37,0x03,0x35,0x03,0x34,0x03,0x37,0x01,0x35,0x01,0x34,0x03,0x34,0x03,0x3a,0x03,0x39,0x03,0x3a,0x03,0x34,0x03,0x3a,0x03,0x39,0x03,0x3a]
ptn2b = [0x03,0x39,0x03,0x38,0x03,0x39,0x03,0x3a,0x03,0x39,0x03,0x37,0x03,0x35,0x03,0x34,0x03,0x35,0x03,0x34,0x03,0x35,0x03,0x37,0x03,0x35,0x03,0x34,0x03,0x32,0x03,0x31]
ptn0a = [0x03,0x37,0x01,0x3a,0x01,0x39,0x03,0x37,0x03,0x3a,0x03,0x39,0x03,0x37,0x03,0x3a,0x01,0x39,0x01,0x37,0x03,0x37,0x03,0x3e,0x03,0x3d,0x03,0x3e,0x03,0x37,0x03,0x3e,0x03,0x3d,0x03,0x3e,0x03,0x3d,0x01,0x40,0x01,0x3e,0x03,0x3d,0x03,0x40,0x01,0x3e,0x01,0x3d,0x03,0x40,0x03,0x3e,0x03,0x40,0x03,0x40,0x01,0x43,0x01,0x41,0x03,0x40,0x03,0x43,0x01,0x41,0x01,0x40,0x03,0x43,0x03,0x41,0x03,0x43,0x03,0x43,0x01,0x46,0x01,0x45,0x03,0x43,0x03,0x46,0x01,0x45,0x01,0x43,0x03,0x46,0x03,0x45,0x03,0x43,0x01,0x48,0x01,0x49,0x01,0x48,0x01,0x46,0x01,0x45,0x01,0x46,0x01,0x45,0x01,0x43,0x01,0x41,0x01,0x43,0x01,0x41,0x01,0x40,0x01,0x3d,0x01,0x39,0x01,0x3b,0x01,0x3d]
ptn0d = [0x01,0x3e,0x01,0x39,0x01,0x35,0x01,0x39,0x01,0x3e,0x01,0x39,0x01,0x35,0x01,0x39,0x03,0x3e,0x01,0x41,0x01,0x40,0x03,0x40,0x01,0x3d,0x01,0x3e,0x01,0x40,0x01,0x3d,0x01,0x39,0x01,0x3d,0x01,0x40,0x01,0x3d,0x01,0x39,0x01,0x3d,0x03,0x40,0x01,0x43,0x01,0x41,0x03,0x41,0x01,0x3e,0x01,0x40,0x01,0x41,0x01,0x3e,0x01,0x39,0x01,0x3e,0x01,0x41,0x01,0x3e,0x01,0x39,0x01,0x3e,0x03,0x41,0x01,0x45,0x01,0x43,0x03,0x43,0x01,0x40,0x01,0x41,0x01,0x43,0x01,0x40,0x01,0x3d,0x01,0x40,0x01,0x43,0x01,0x40,0x01,0x3d,0x01,0x40,0x01,0x46,0x01,0x43,0x01,0x45,0x01,0x46,0x01,0x44,0x01,0x43,0x01,0x40,0x01,0x3d]
ptn0f = [0x01,0x3e,0x01,0x39,0x01,0x35,0x01,0x39,0x01,0x3e,0x01,0x39,0x01,0x35,0x01,0x39,0x01,0x3e,0x01,0x39,0x01,0x35,0x01,0x39,0x01,0x3e,0x01,0x39,0x01,0x35,0x01,0x39,0x01,0x3e,0x01,0x3a,0x01,0x37,0x01,0x3a,0x01,0x3e,0x01,0x3a,0x01,0x37,0x01,0x3a,0x01,0x3e,0x01,0x3a,0x01,0x37,0x01,0x3a,0x01,0x3e,0x01,0x3a,0x01,0x37,0x01,0x3a,0x01,0x40,0x01,0x3d,0x01,0x39,0x01,0x3d,0x01,0x40,0x01,0x3d,0x01,0x39,0x01,0x3d,0x01,0x40,0x01,0x3d,0x01,0x39,0x01,0x3d,0x01,0x40,0x01,0x3d,0x01,0x39,0x01,0x3d,0x01,0x41,0x01,0x3e,0x01,0x39,0x01,0x3e,0x01,0x41,0x01,0x3e,0x01,0x39,0x01,0x3e,0x01,0x41,0x01,0x3e,0x01,0x39,0x01,0x3e,0x01,0x41,0x01,0x3e,0x01,0x39,0x01,0x3e,0x01,0x43,0x01,0x3e,0x01,0x3a,0x01,0x3e,0x01,0x43,0x01,0x3e,0x01,0x3a,0x01,0x3e,0x01,0x43,0x01,0x3e,0x01,0x3a,0x01,0x3e,0x01,0x43,0x01,0x3e,0x01,0x3a,0x01,0x3e,0x01,0x43,0x01,0x3f,0x01,0x3c,0x01,0x3f,0x01,0x43,0x01,0x3f,0x01,0x3c,0x01,0x3f,0x01,0x43,0x01,0x3f,0x01,0x3c,0x01,0x3f,0x01,0x43,0x01,0x3f,0x01,0x3c,0x01,0x3f,0x01,0x45,0x01,0x42,0x01,0x3c,0x01,0x42,0x01,0x45,0x01,0x42,0x01,0x3c,0x01,0x42,0x01,0x48,0x01,0x45,0x01,0x42,0x01,0x45,0x01,0x4b,0x01,0x48,0x01,0x45,0x01,0x48,0x01,0x4b,0x01,0x4a,0x01,0x48,0x01,0x4a,0x01,0x4b,0x01,0x4a,0x01,0x48,0x01,0x4a,0x01,0x4b,0x01,0x4a,0x01,0x48,0x01,0x4a,0x01,0x4c,0x01,0x4e,0x03,0x4f]
ptn11 = [0xbf,0x06,0x56,0x1f,0x57,0x1f,0x56,0x1f,0x5b,0x1f,0x56,0x1f,0x57,0x1f,0x56,0x1f,0x4f]
ptn12 = [0xbf,0x0c,0x68,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f]
ptn13 = [0xbf,0x08,0x13,0x3f,0x13,0x3f,0x13,0x3f,0x13,0x3f,0x13,0x3f,0x13,0x3f,0x13,0x1f,0x13]
ptn14 = [0x97,0x09,0x2e,0x03,0x2e,0x1b,0x32,0x03,0x32,0x1b,0x31,0x03,0x31,0x1f,0x34,0x43,0x17,0x32,0x03,0x32,0x1b,0x35,0x03,0x35,0x1b,0x34,0x03,0x34,0x0f,0x37,0x8f,0x0a,0x37,0x43]
ptn15 = [0x97,0x09,0x2b,0x03,0x2b,0x1b,0x2e,0x03,0x2e,0x1b,0x2d,0x03,0x2d,0x1f,0x30,0x43,0x17,0x2e,0x03,0x2e,0x1b,0x32,0x03,0x32,0x1b,0x31,0x03,0x31,0x0f,0x34,0x8f,0x0a,0x34,0x43]
ptn16 = [0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f,0x0f,0x1f]
ptn17 = [0x97,0x09,0x33,0x03,0x33,0x1b,0x37,0x03,0x37,0x1b,0x36,0x03,0x36,0x1f,0x39,0x43,0x17,0x37,0x03,0x37,0x1b,0x3a,0x03,0x3a,0x1b,0x39,0x03,0x39,0x2f,0x3c,0x21,0x3c,0x21,0x3d,0x21,0x3e,0x21,0x3f,0x21,0x40,0x21,0x41,0x21,0x42,0x21,0x43,0x21,0x44,0x01,0x45]
ptn18 = [0x97,0x09,0x30,0x03,0x30,0x1b,0x33,0x03,0x33,0x1b,0x32,0x03,0x32,0x1f,0x36,0x43,0x17,0x33,0x03,0x33,0x1b,0x37,0x03,0x37,0x1b,0x36,0x03,0x36,0x2f,0x39,0x21,0x39,0x21,0x3a,0x21,0x3b,0x21,0x3c,0x21,0x3d,0x21,0x3e,0x21,0x3f,0x21,0x40,0x21,0x41,0x01,0x42]
ptn19 = [0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a,0x0f,0x1a]
ptn1a = [0x1f,0x46,0xbf,0x0a,0x46,0x7f,0x7f]
ptn1b = [0x1f,0x43,0xbf,0x0a,0x43,0x7f]
ptn1c = [0x83,0x02,0x13,0x03,0x13,0x03,0x1e,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1e,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1e,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1e,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1e,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1e,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1e,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1e,0x03,0x1f]
ptn29 = [0x8f,0x0b,0x38,0x4f]
ptn2c = [0x83,0x0e,0x32,0x07,0x32,0x07,0x2f,0x07,0x2f,0x03,0x2b,0x87,0x0b,0x46,0x83,0x0e,0x2c,0x03,0x2c,0x8f,0x0b,0x32]
ptn2d = [0x43,0x83,0x0e,0x32,0x03,0x32,0x03,0x2f,0x03,0x2f,0x03,0x2c,0x87,0x0b,0x38]
ptn39 = [0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f,0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f,0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f,0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f,0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f,0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f,0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f,0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f]
ptn01 = [0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f,0x83,0x01,0x43,0x01,0x4f,0x01,0x5b,0x87,0x03,0x2f]
ptn02 = [0x83,0x02,0x13,0x03,0x13,0x03,0x1f,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1f,0x03,0x1f]
ptn1d = [0x03,0x15,0x03,0x15,0x03,0x1f,0x03,0x21,0x03,0x15,0x03,0x15,0x03,0x1f,0x03,0x21] 
ptn1e = [0x03,0x1a,0x03,0x1a,0x03,0x1c,0x03,0x1c,0x03,0x1d,0x03,0x1d,0x03,0x1e,0x03,0x1e]
ptn1f = [0x03,0x1a,0x03,0x1a,0x03,0x24,0x03,0x26,0x03,0x13,0x03,0x13,0x07,0x1f]
ptn04 = [0x03,0x18,0x03,0x18,0x03,0x24,0x03,0x24,0x03,0x18,0x03,0x18,0x03,0x24,0x03,0x24,0x03,0x20,0x03,0x20,0x03,0x2c,0x03,0x2c,0x03,0x20,0x03,0x20,0x03,0x2c,0x03,0x2c]
ptn20 = [0x03,0x19,0x03,0x19,0x03,0x25,0x03,0x25,0x03,0x19,0x03,0x19,0x03,0x25,0x03,0x25,0x03,0x21,0x03,0x21,0x03,0x2d,0x03,0x2d,0x03,0x21,0x03,0x21,0x03,0x2d,0x03,0x2d]
ptn06 = [0x03,0x1a,0x03,0x1a,0x03,0x26,0x03,0x26,0x03,0x1a,0x03,0x1a,0x03,0x26,0x03,0x26,0x03,0x15,0x03,0x15,0x03,0x21,0x03,0x21,0x03,0x15,0x03,0x15,0x03,0x21,0x03,0x21,0x03,0x18,0x03,0x18,0x03,0x24,0x03,0x24,0x03,0x18,0x03,0x18,0x03,0x24,0x03,0x24,0x03,0x1f,0x03,0x1f,0x03,0x2b,0x03,0x2b,0x03,0x1f,0x03,0x1f,0x03,0x2b,0x03,0x2b,0x03,0x1a,0x03,0x1a,0x03,0x26,0x03,0x26,0x03,0x1a,0x03,0x1a,0x03,0x26,0x03,0x26,0x03,0x15,0x03,0x15,0x03,0x21,0x03,0x21,0x03,0x15,0x03,0x15,0x03,0x21,0x03,0x21,0x03,0x18,0x03,0x18,0x03,0x24,0x03,0x24,0x03,0x18,0x03,0x18,0x03,0x24,0x03,0x24,0x03,0x1c,0x03,0x1c,0x03,0x28,0x03,0x28,0x03,0x1c,0x03,0x1c,0x03,0x28,0x03,0x28,0x83,0x04,0x36,0x07,0x36,0x07,0x37,0x07,0x36,0x03,0x33,0x07,0x32,0x57]
ptn3b = [0x83,0x04,0x36,0x07,0x36,0x07,0x37,0x07,0x36,0x03,0x33,0x07,0x32,0x57]
ptn08 = [0x83,0x02,0x1b,0x03,0x1b,0x03,0x27,0x03,0x27,0x03,0x1b,0x03,0x1b,0x03,0x27,0x03,0x27]
ptn21 = [0x03,0x1c,0x03,0x1c,0x03,0x28,0x03,0x28,0x03,0x1c,0x03,0x1c,0x03,0x28,0x03,0x28]
ptn22 = [0x03,0x1d,0x03,0x1d,0x03,0x29,0x03,0x29,0x03,0x1d,0x03,0x1d,0x03,0x29,0x03,0x29]
ptn23 = [0x03,0x18,0x03,0x18,0x03,0x24,0x03,0x24,0x03,0x18,0x03,0x18,0x03,0x24,0x03,0x24]
ptn24 = [0x03,0x1e,0x03,0x1e,0x03,0x2a,0x03,0x2a,0x03,0x1e,0x03,0x1e,0x03,0x2a,0x03,0x2a]
ptn25 = [0x83,0x05,0x26,0x01,0x4a,0x01,0x34,0x03,0x29,0x03,0x4c,0x03,0x4a,0x03,0x31,0x03,0x4a,0x03,0x24,0x03,0x22,0x01,0x46,0x01,0x30,0x03,0x25,0x03,0x48,0x03,0x46,0x03,0x2d,0x03,0x46,0x03,0x24]
ptn0b = [0x83,0x02,0x1a,0x03,0x1a,0x03,0x26,0x03,0x26,0x03,0x1a,0x03,0x1a,0x03,0x26,0x03,0x26]
ptn0c = [0x03,0x13,0x03,0x13,0x03,0x1d,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1d,0x03,0x1f]
ptn26 = [0x87,0x02,0x1a,0x87,0x03,0x2f,0x83,0x02,0x26,0x03,0x26,0x87,0x03,0x2f]
ptn10 = [0x07,0x1a,0x4f,0x47]
ptn0e = [0x03,0x1f,0x03,0x1f,0x03,0x24,0x03,0x26,0x07,0x13,0x47]
ptn30 = [0xbf,0x0f,0x32,0x0f,0x32,0x8f,0x90,0x30,0x3f,0x32,0x13,0x32,0x03,0x32,0x03,0x35,0x03,0x37,0x3f,0x37,0x0f,0x37,0x8f,0x90,0x30,0x3f,0x32,0x13,0x32,0x03,0x2d,0x03,0x30,0x03,0x32]
ptn31 = [0x0f,0x32,0xaf,0x90,0x35,0x0f,0x37,0xa7,0x99,0x37,0x07,0x35,0x3f,0x32,0x13,0x32,0x03,0x32,0xa3,0xe8,0x35,0x03,0x37,0x0f,0x35,0xaf,0x90,0x37,0x0f,0x37,0xa7,0x99,0x37,0x07,0x35,0x3f,0x32,0x13,0x32,0x03,0x2d,0xa3,0xe8,0x30,0x03,0x32]
ptn32 = [0x07,0x32,0x03,0x39,0x13,0x3c,0xa7,0x9a,0x37,0xa7,0x9b,0x38,0x07,0x37,0x03,0x35,0x03,0x32,0x03,0x39,0x1b,0x3c,0xa7,0x9a,0x37,0xa7,0x9b,0x38,0x07,0x37,0x03,0x35,0x03,0x32,0x03,0x39,0x03,0x3c,0x03,0x3e,0x03,0x3c,0x07,0x3e,0x03,0x3c,0x03,0x39,0xa7,0x9a,0x37,0xa7,0x9b,0x38,0x07,0x37,0x03,0x35,0x03,0x32,0xaf,0x90,0x3c,0x1f,0x3e,0x43,0x03,0x3e,0x03,0x3c,0x03,0x3e]
ptn33 = [0x03,0x3e,0x03,0x3e,0xa3,0xe8,0x3c,0x03,0x3e,0x03,0x3e,0x03,0x3e,0xa3,0xe8,0x3c,0x03,0x3e,0x03,0x3e,0x03,0x3e,0xa3,0xe8,0x3c,0x03,0x3e,0x03,0x3e,0x03,0x3e,0xa3,0xe8,0x3c,0x03,0x3e,0xaf,0x91,0x43,0x1f,0x41,0x43,0x03,0x3e,0x03,0x41,0x03,0x43,0x03,0x43,0x03,0x43,0xa3,0xe8,0x41,0x03,0x43,0x03,0x43,0x03,0x43,0xa3,0xe8,0x41,0x03,0x43,0x03,0x45,0x03,0x48,0xa3,0xfd,0x45,0x03,0x44,0x01,0x43,0x01,0x41,0x03,0x3e,0x03,0x3c,0x03,0x3e,0x2f,0x3e,0xbf,0x98,0x3e,0x43,0x03,0x3e,0x03,0x3c,0x03,0x3e]
ptn34 = [0x03,0x4a,0x03,0x4a,0xa3,0xf8,0x48,0x03,0x4a,0x03,0x4a,0x03,0x4a,0xa3,0xf8,0x48,0x03,0x4a]
ptn35 = [0x01,0x51,0x01,0x54,0x01,0x51,0x01,0x54,0x01,0x51,0x01,0x54,0x01,0x51,0x01,0x54,0x01,0x51,0x01,0x54,0x01,0x51,0x01,0x54,0x01,0x51,0x01,0x54,0x01,0x51,0x01,0x54]
ptn36 = [0x01,0x50,0x01,0x4f,0x01,0x4d,0x01,0x4a,0x01,0x4f,0x01,0x4d,0x01,0x4a,0x01,0x48,0x01,0x4a,0x01,0x48,0x01,0x45,0x01,0x43,0x01,0x44,0x01,0x43,0x01,0x41,0x01,0x3e,0x01,0x43,0x01,0x41,0x01,0x3e,0x01,0x3c,0x01,0x3e,0x01,0x3c,0x01,0x39,0x01,0x37,0x01,0x38,0x01,0x37,0x01,0x35,0x01,0x32,0x01,0x37,0x01,0x35,0x01,0x32,0x01,0x30]
ptn37 = [0x5f,0x5f,0x5f,0x47,0x83,0x0e,0x32,0x07,0x32,0x07,0x2f,0x03,0x2f,0x07,0x2f,0x97,0x0b,0x3a,0x5f,0x5f,0x47,0x8b,0x0e,0x32,0x03,0x32,0x03,0x2f,0x03,0x2f,0x47,0x97,0x0b,0x3a,0x5f,0x5f,0x47,0x83,0x0e,0x2f,0x0b,0x2f,0x03,0x2f,0x03,0x2f,0x87,0x0b,0x30,0x17,0x3a,0x5f,0x8b,0x0e,0x32,0x0b,0x32,0x0b,0x2f,0x0b,0x2f,0x07,0x2c,0x07,0x2c]
ptn38 = [0x87,0x0b,0x34,0x17,0x3a,0x5f,0x5f,0x84,0x0e,0x32,0x04,0x32,0x05,0x32,0x04,0x2f,0x04,0x2f,0x05,0x2f,0x47,0x97,0x0b,0x3a,0x5f,0x5f,0x84,0x0e,0x32,0x04,0x32,0x05,0x32,0x04,0x2f,0x04,0x2f,0x05,0x2f]
ptn2f = [0x03,0x1a,0x03,0x1a,0x03,0x24,0x03,0x26,0x03,0x1a,0x03,0x1a,0x03,0x18,0x03,0x19,0x03,0x1a,0x03,0x1a,0x03,0x24,0x03,0x26,0x03,0x1a,0x03,0x1a,0x03,0x18,0x03,0x19,0x03,0x18,0x03,0x18,0x03,0x22,0x03,0x24,0x03,0x18,0x03,0x18,0x03,0x16,0x03,0x17,0x03,0x18,0x03,0x18,0x03,0x22,0x03,0x24,0x03,0x18,0x03,0x18,0x03,0x16,0x03,0x17,0x03,0x13,0x03,0x13,0x03,0x1d,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1d,0x03,0x1e,0x03,0x13,0x03,0x13,0x03,0x1d,0x03,0x1f,0x03,0x13,0x03,0x13,0x03,0x1d,0x03,0x1e,0x03,0x1a,0x03,0x1a,0x03,0x24,0x03,0x26,0x03,0x1a,0x03,0x1a,0x03,0x18,0x03,0x19,0x03,0x1a,0x03,0x1a,0x03,0x24,0x03,0x26,0x03,0x1a,0x03,0x1a,0x03,0x18,0x03,0x19]

# instruments
instrtable = [0x80,0x09,0x41,0x48,0x60,0x03,0x81,0x00,0x00,0x08,0x81,0x02,0x08,0x00,0x00,0x01,0xa0,0x02,0x41,0x09,0x80,0x00,0x00,0x00,0x00,0x02,0x81,0x09,0x09,0x00,0x00,0x05,0x00,0x08,0x41,0x08,0x50,0x02,0x00,0x04,0x00,0x01,0x41,0x3f,0xc0,0x02,0x00,0x00,0x00,0x08,0x41,0x04,0x40,0x02,0x00,0x00,0x00,0x08,0x41,0x09,0x00,0x02,0x00,0x00,0x00,0x09,0x41,0x09,0x70,0x02,0x5f,0x04,0x00,0x09,0x41,0x4a,0x69,0x02,0x81,0x00,0x00,0x09,0x41,0x40,0x6f,0x00,0x81,0x02,0x80,0x07,0x81,0x0a,0x0a,0x00,0x00,0x01,0x00,0x09,0x41,0x3f,0xff,0x01,0xe7,0x02,0x00,0x08,0x41,0x90,0xf0,0x01,0xe8,0x02,0x00,0x08,0x41,0x06,0x0a,0x00,0x00,0x01,0x00,0x09,0x41,0x19,0x70,0x02,0xa8,0x00,0x00,0x02,0x41,0x09,0x90,0x02,0x00,0x00,0x00,0x00,0x11,0x0a,0xfa,0x00,0x00,0x05,0x00,0x08,0x41,0x37,0x40,0x02,0x00,0x00,0x00,0x08,0x11,0x07,0x70,0x02,0x00,0x00]

# pattern order
montymaintr1 = [ptn11,ptn14,ptn17,ptn1a,ptn00,ptn27,ptn00,ptn28,ptn03,ptn05,ptn00,ptn27,ptn00,ptn28,ptn03,ptn05,ptn07,ptn3a,ptn14,ptn17,ptn00,ptn27,ptn00,ptn28,ptn2f,ptn30,ptn31,ptn31,ptn32,ptn33,ptn33,ptn34,ptn34,ptn34,ptn34,ptn34,ptn34,ptn34,ptn34,ptn35,ptn35,ptn35,ptn35,ptn35,ptn35,ptn36,ptn12,ptn37,ptn38,ptn09,ptn2a,ptn09,ptn2b,ptn09,ptn0a,ptn09,ptn2a,ptn09,ptn2b,ptn09,ptn0a,ptn0d,ptn0d,ptn0f]
montymaintr2 = [ptn12,ptn15,ptn18,ptn1b,ptn2d,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn2c,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn2c,ptn39,ptn39,ptn39,ptn01,ptn01,ptn29,ptn29,ptn2c,ptn15,ptn18,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn39,ptn01,ptn01,ptn01,ptn29,ptn39,ptn39,ptn39,ptn01,ptn01,ptn01,ptn29,ptn39,ptn39,ptn39,ptn39]
montymaintr3 = [ptn13,ptn16,ptn19,ptn1c,ptn02,ptn02,ptn1d,ptn1e,ptn02,ptn02,ptn1d,ptn1f,ptn04,ptn04,ptn20,ptn20,ptn06,ptn02,ptn02,ptn1d,ptn1e,ptn02,ptn02,ptn1d,ptn1f,ptn04,ptn04,ptn20,ptn20,ptn06,ptn08,ptn08,ptn08,ptn08,ptn21,ptn21,ptn21,ptn21,ptn22,ptn22,ptn22,ptn23,ptn22,ptn24,ptn25,ptn3b,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn26,ptn02,ptn02,ptn1d,ptn1e,ptn02,ptn02,ptn1d,ptn1f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn2f,ptn0b,ptn0b,ptn1d,ptn1d,ptn0b,ptn0b,ptn1d,ptn0b,ptn0b,ptn0b,ptn0c,ptn0c,ptn1d,ptn1d,ptn1d,ptn10,ptn0b,ptn0b,ptn1d,ptn1d,ptn0b,ptn0b,ptn1d,ptn0b,ptn0b,ptn0b,ptn0c,ptn0c,ptn1d,ptn1d,ptn1d,ptn10,ptn0b,ptn1d,ptn0b,ptn1d,ptn0b,ptn1d,ptn0b,ptn1d,ptn0b,ptn0c,ptn1d,ptn0b,ptn0c,ptn23,ptn0b,ptn0b]

freqtable = [0x16,0x01,0x27,0x01,0x38,0x01,0x4b,0x01,0x5f,0x01,0x73,0x01,0x8a,0x01,0xa1,0x01,0xba,0x01,0xd4,0x01,0xf0,0x01,0x0e,0x02,0x2d,0x02,0x4e,0x02,0x71,0x02,0x96,0x02,0xbd,0x02,0xe7,0x02,0x13,0x03,0x42,0x03,0x74,0x03,0xa9,0x03,0xe0,0x03,0x1b,0x04,0x5a,0x04,0x9b,0x04,0xe2,0x04,0x2c,0x05,0x7b,0x05,0xce,0x05,0x27,0x06,0x85,0x06,0xe8,0x06,0x51,0x07,0xc1,0x07,0x37,0x08,0xb4,0x08,0x37,0x09,0xc4,0x09,0x57,0x0a,0xf5,0x0a,0x9c,0x0b,0x4e,0x0c,0x09,0x0d,0xd0,0x0d,0xa3,0x0e,0x82,0x0f,0x6e,0x10,0x68,0x11,0x6e,0x12,0x88,0x13,0xaf,0x14,0xeb,0x15,0x39,0x17,0x9c,0x18,0x13,0x1a,0xa1,0x1b,0x46,0x1d,0x04,0x1f,0xdc,0x20,0xd0,0x22,0xdc,0x24,0x10,0x27,0x5e,0x29,0xd6,0x2b,0x72,0x2e,0x38,0x31,0x26,0x34,0x42,0x37,0x8c,0x3a,0x08,0x3e,0xb8,0x41,0xa0,0x45,0xb8,0x49,0x20,0x4e,0xbc,0x52,0xac,0x57,0xe4,0x5c,0x70,0x62,0x4c,0x68,0x84,0x6e,0x18,0x75,0x10,0x7c,0x70,0x83,0x40,0x8b,0x70,0x93,0x40,0x9c,0x78,0xa5,0x58,0xaf,0xc8,0xb9,0xe0,0xc4,0x98,0xd0,0x08,0xdd,0x30,0xea,0x20,0xf8,0x2e,0xfd]

# quick hubbard bytecode validator. When track terminates, state should be 0.
#for tr in montymaintr1, montymaintr2, montymaintr3:
#    for patnumber in range(len(tr)):
#        pat = tr[patnumber]
#        state = 0
#        for n in pat:
#            if state == 0:
#                if n & 0x40:
#                    continue
#                if n & 0x80:
#                    state = 1
#                else:
#                    state = 2
#                continue
#            if state == 1:
#                state = 2
#                continue
#            if state == 2:
#                state = 0
#                continue

#regoffsets .byt $00,$07,$0e         # 0x60, 0x61
#tmpregofst .byt $00 
#posoffset  .byt $00,$00,$00         # 0x62. 0x63
#patoffset  .byt $00,$00,$00         # 0x63, 0x64
#lengthleft .byt $00,$00,$00         # 0x65, 0x66
#savelnthcc .byt $00,$00,$00         # 0x66, 0x67
#voicectrl  .byt $00,$00,$00         # 0x68, 0x69
#notenum    .byt $00,$00,$00         # 0x69
#instrnr    .byt $00,$00,$00

class HubbardTrack(object):
    __slots__ = ['instrlen', 'counter', 'appendmode', 'norelease', 'voicectrl', 'track', 'pitch', 'curfreq', 'pattern_number', 'pattern_position', 'playing_position', 'wait', 'instrdelay', 'instrument', 'portamento', 'portamento_down', 'pulsedelay', 'pulsedown', 'instrument_started']
    pitch68_lowbyte = 0
    pitch68_highbyte = 0
    pitch69_lowbyte = 0
    pitch69_highbyte = 0

    def __init__(self, track):
        self.track = track
        self.pattern_number = 0
        self.playing_position = 0
        self.wait = 0
        self.instrdelay = 0
        self.pitch = None
        self.instrlen = None
        self.instrument = None
        self.instrument_started = None
        self.portamento = None
        self.portamento_down = None
        self.norelease = None
        self.appendmode = None
        self.curfreq = None

        self.counter = 0
        self.pulsedelay = 0
        self.pulsedown = 0

    def clock(self):
        # effect timesource
        self.counter += 1

        if self.wait == 0:
            self.wait = 1
            return self.newcommand()
        self.wait -= 1
        return self.effects()

    def newcommand(self):
        new_instrument = False
        sidstate = []

        if self.instrdelay != 0:
            self.instrdelay -= 1
            if self.instrdelay == 0 and not self.norelease:
                sidstate.append((4, self.voicectrl & 0xfe))
                sidstate.append((5, 0))
                sidstate.append((6, 0))
            return sidstate + self.effects()

        pattern = self.track[self.pattern_number]

        cmd = pattern[self.playing_position]
        self.playing_position += 1
        self.instrlen = self.instrdelay = cmd & 0x1f
        self.norelease = cmd & 0x20 
        self.appendmode = cmd & 0x40
        self.portamento = 0    

        # new instrument / portamento / pitch reading if not append
        if not self.appendmode:
            if cmd & 0x80:
                cmd2 = pattern[self.playing_position]
                self.playing_position += 1
                if cmd2 & 0x80:
                    self.portamento = (cmd2 & 0x7f) >> 1;
                    self.portamento_down = cmd2 & 1
                else:
                    self.instrument = cmd2
                    self.instrument_started = True
            
            self.pitch = pattern[self.playing_position]
            self.playing_position += 1
            pitch = self.pitch
            if self.pitch == 0x68:
                self.curfreq = HubbardTrack.pitch68_lowbyte + HubbardTrack.pitch68_highbyte * 256
            else:
                self.curfreq = freqtable[pitch * 2] + freqtable[pitch * 2 + 1] * 256
            sidstate += [(1, self.curfreq >> 8), (0, self.curfreq & 0xff)]

        if self.playing_position == len(pattern):
            self.pattern_number += 1
            self.playing_position = 0
            if self.pattern_number == len(self.track):
                self.pattern_number = 0

        # tell playroutine the instrument setup commands
        instroffset = 8 * self.instrument
        self.voicectrl = instrtable[instroffset + 2]
        # pitch68 support 
        if self.track == montymaintr1:
            HubbardTrack.pitch68_lowbyte = self.voicectrl
            HubbardTrack.pitch69_highbyte = self.pitch
        if self.track == montymaintr2:
            HubbardTrack.pitch68_highbyte = self.voicectrl
        if self.track == montymaintr3:
            HubbardTrack.pitch69_lowbyte = self.voicectrl
        if self.appendmode:
            sidstate.append((4, self.voicectrl & 0xfe))
        else:
            sidstate.append((4, self.voicectrl))

        sidstate.append((2, instrtable[instroffset + 0]))
        sidstate.append((3, instrtable[instroffset + 1]))
        sidstate.append((5, instrtable[instroffset + 3]))
        sidstate.append((6, instrtable[instroffset + 4]))
        sidstate.append((7, instrtable[instroffset + 5]))

        return sidstate

    def effects(self):
        sidstate = []

        vibratodepth = instrtable[self.instrument * 8 + 5]
        pulse = instrtable[self.instrument * 8 + 6]
        fx = instrtable[self.instrument * 8 + 7]

        if vibratodepth:
            vibtable = [0, 1, 2, 3, 3, 2, 1, 0]
            oscval = vibtable[self.counter & 0x7]

            pitch = self.pitch
            if pitch == 0x68:
                cur1 = HubbardTrack.pitch68_lowbyte + HubbardTrack.pitch68_highbyte * 256
                cur2 = HubbardTrack.pitch69_lowbyte + HubbardTrack.pitch69_highbyte * 256
            else:
                # obtain the difference between 2 pitches in table
                cur1 = freqtable[pitch * 2] + freqtable[pitch * 2 + 1] * 256
                pitch += 1
                cur2 = freqtable[pitch * 2] + freqtable[pitch * 2 + 1] * 256
            diff = cur2 - cur1

            # divide by 2 for each level of depth
            for _ in range(vibratodepth + 1):
                diff /= 2
            
            # vibrato ends when note gets close to finish
            if self.instrlen >= 8:
                cur1 += diff * oscval
            
            # tell SID about the new frequency
            sidstate += [(1, cur1 >> 8), (0, cur1 & 0xff)]

        if pulse:
            if self.pulsedelay == 0:
                self.pulsedelay = pulse & 0x1f
                pulsespeed = pulse & 0xe0

                instrpulse = instrtable[self.instrument * 8] + instrtable[self.instrument * 8 + 1] * 256
                if self.pulsedown:
                    instrpulse -= pulsespeed
                    instrpulse &= 0xfff
                    if instrpulse < 0x900:
                        self.pulsedown = 0
                else:
                    instrpulse += pulsespeed
                    instrpulse &= 0xfff
                    if instrpulse >= 0xe00:
                        self.pulsedown = 1
                
                instrtable[self.instrument * 8    ] = instrpulse & 0xff
                instrtable[self.instrument * 8 + 1] = instrpulse >> 8
                sidstate += [(3, instrpulse >> 8), (2, instrpulse & 0xff)]
            self.pulsedelay -= 1
        
        if self.portamento:
            if self.portamento_down:
                self.curfreq -= self.portamento
            else:    
                self.curfreq += self.portamento
            sidstate += [(1, self.curfreq >> 8), (0, self.curfreq & 0xff)]
       
        # drum effect
        if fx & 1 and self.curfreq >= 256 and self.instrdelay > 0:
            if self.instrument_started:
                sidstate += [(4, 0x80)]
            else:
                self.curfreq -= 256
                sidstate += [(1, self.curfreq >> 8)]
                sidstate += [(4, self.voicectrl & 0xfe)]

        # fast portamento down
        if fx & 2 and self.counter & 1 and self.curfreq >= 256:
            self.curfreq -= 256
            sidstate += [(1, self.curfreq >> 8)]

        # octave arpeggio
        if fx & 4:
            pitch = self.pitch
            if self.pitch == 0x68:
                pitch = HubbardTrack.pitch68_lowbyte + HubbardTrack.pitch68_highbyte * 256
            if self.counter & 1:
                pitch += 12
            sidstate += [(1, freqtable[pitch * 2 + 1]), (0, freqtable[pitch * 2 + 0])]

        self.instrument_started = False
        return sidstate

class MontyOnTheRun(object):
    __slots__ = ['sid', 'track1', 'track2', 'track3']
    def __init__(self):
        self.sid = JSIDPlay2er()
        self.track1 = HubbardTrack(montymaintr1)
        self.track2 = HubbardTrack(montymaintr2)
        self.track3 = HubbardTrack(montymaintr3)

    def play(self):
        while True:
            channel = 0
            delay_per_frame = 985248 / 50
            rasterline = delay_per_frame / 300
            for track in (self.track1, self.track2, self.track3):
                cmd = track.clock()
                for reg, val in cmd:
                    # send the SID commands from sidroutine
                    self.sid.poke(channel * 7 + reg, val, 12)
                    delay_per_frame -= 12
                channel += 1
                # some rasterline delay per channels
                self.sid.poke(31, 0, 2 * rasterline)
                delay_per_frame -= 2 * rasterline
            # rest of frame delay
            self.sid.poke(31, 0, delay_per_frame)

def main():
    MontyOnTheRun().play()

if __name__ == '__main__':
    main()
